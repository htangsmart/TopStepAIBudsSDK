#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef TOPSTEPAIBUDSSDK_SWIFT_H
#define TOPSTEPAIBUDSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TopStepAIBudsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(uint8_t, TPSSDKType, open) {
  TPSSDKTypeUnknow = 0,
  TPSSDKTypeFlywear = 1,
  TPSSDKTypeFitcloud = 2,
  TPSSDKTypeShenjuwm = 3,
  TPSSDKTypeAbmate = 4,
};

@class CBPeripheral;
@class CBService;
@class CBCharacteristic;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK10TSBTDevice")
@interface TSBTDevice : NSObject <CBPeripheralDelegate>
/// EN: Called after discovering services on the peripheral.
/// CN: 发现外设的服务后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Called after discovering characteristics for a specific service.
/// CN: 为指定服务发现特征后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Called when the notification state for a characteristic changes.
/// CN: 当某个特征的通知开关状态发生变化时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a value was written to a characteristic.
/// CN: 向特征写入数据完成后的回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a characteristic’s value is updated.
/// CN: 当读取或通知导致特征值更新时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
@class NSString;
/// EN: Device basic information model for Objective‑C API
/// CN: 提供给 Objective‑C 的设备基础信息模型
SWIFT_CLASS("_TtC16TopStepAIBudsSDK20TSDeviceBaseInfoObjc")
@interface TSDeviceBaseInfoObjc : NSObject
/// EN: SDK type (TPSSDKType.rawValue)
/// CN: SDK 类型（TPSSDKType.rawValue）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull sdkType;
/// EN: Vendor device type (TPSDeviceType.rawValue, UInt)
/// CN: 厂商设备类型（TPSDeviceType.rawValue，UInt）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull deviceType;
/// EN: Device category (TPSDeviceCategory.rawValue)
/// CN: 设备分类（TPSDeviceCategory.rawValue）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull deviceCategory;
/// EN: Device MAC (string if available)
/// CN: 设备 MAC（如有）
@property (nonatomic, readonly, strong) NSString * _Nonnull mac;
/// EN: Advertised name or peripheral name
/// CN: 设备名称
@property (nonatomic, readonly, strong) NSString * _Nonnull name;
/// EN: Peripheral UUID string
/// CN: 设备 UUID 字符串
@property (nonatomic, readonly, strong) NSString * _Nonnull uuid;
- (nonnull instancetype)initWithSdkType:(NSNumber * _Nonnull)sdkType deviceType:(NSNumber * _Nonnull)deviceType deviceCategory:(NSNumber * _Nonnull)deviceCategory mac:(NSString * _Nonnull)mac name:(NSString * _Nonnull)name uuid:(NSString * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// EN: Bluetooth command category (packet type)
/// CN: 蓝牙指令类型（报文类型）
typedef SWIFT_ENUM(uint8_t, TSSBBTCommandType, open) {
  TSSBBTCommandTypeRequest = 1,
  TSSBBTCommandTypeResponse = 2,
  TSSBBTCommandTypeNotify = 3,
};

@class TSSBEarbudsCommMannger;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK11TSSBEarbuds")
@interface TSSBEarbuds : TSBTDevice
/// EN: Command manager for high-level device operations
/// CN: 指令管理器
@property (nonatomic, readonly, strong) TSSBEarbudsCommMannger * _Nonnull commandManager;
/// EN: Peripheral did discover services callback
/// CN: 发现服务回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Peripheral did discover characteristics for service callback
/// CN: 发现特征回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Notification state update for characteristic callback
/// CN: 设置数据读取特征通知回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Write value result callback
/// CN: 写入特征值结果回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Characteristic value update callback (read/notify)
/// CN: 特征值更新回调（读取/通知）
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

/// EN: Active Noise Cancellation modes
/// CN: ANC 模式
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsAncMode, open) {
/// 普通模式
  TSSBEarbudsAncModeNormal = 0,
/// 降噪模式
  TSSBEarbudsAncModeNoiseCancellation = 1,
/// 通透模式
  TSSBEarbudsAncModeTransparency = 2,
};

/// 耳机蓝牙指令管理类
/// 负责管理与耳机的蓝牙通信，包括：
/// <ol>
///   <li>
///     发送请求到耳机
///   </li>
///   <li>
///     处理耳机的响应
///   </li>
///   <li>
///     管理请求队列和超时
///   </li>
///   <li>
///     处理分包数据
///   </li>
/// </ol>
SWIFT_CLASS("_TtC16TopStepAIBudsSDK22TSSBEarbudsCommMannger")
@interface TSSBEarbudsCommMannger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// EN: Bluetooth command codes for earbuds protocol
/// CN: 耳机协议的蓝牙指令码
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsCommandType, open) {
/// EQ音效设置
  TSSBEarbudsCommandTypeEq = 0x20,
/// 音乐播放控制
  TSSBEarbudsCommandTypeMusicControl = 0x21,
/// 耳机操作设置
  TSSBEarbudsCommandTypeDeviceOperation = 0x22,
/// 定时关机设置
  TSSBEarbudsCommandTypeAutoShutdown = 0x23,
/// 设备端恢复出厂设置
  TSSBEarbudsCommandTypeFactoryReset = 0x24,
/// 工作模式设置
  TSSBEarbudsCommandTypeWorkMode = 0x25,
/// 入耳检测设置
  TSSBEarbudsCommandTypeInEarDetect = 0x26,
/// 获取设备信息
  TSSBEarbudsCommandTypeDeviceInfo = 0x27,
/// 设备端上报设备信息
  TSSBEarbudsCommandTypeDeviceInfoNotify = 0x28,
/// 提示音设置
  TSSBEarbudsCommandTypePromptTone = 0x29,
/// 查找耳机
  TSSBEarbudsCommandTypeFindDevice = 0x2A,
/// 来电自动接听设置
  TSSBEarbudsCommandTypeAutoAnswer = 0x2B,
/// ANC模式设置
  TSSBEarbudsCommandTypeAncMode = 0x2C,
/// 设备蓝牙名设置
  TSSBEarbudsCommandTypeBluetoothName = 0x2D,
/// LED灯开关设置
  TSSBEarbudsCommandTypeLedMode = 0x2E,
/// 清除与手机的所有配对记录
  TSSBEarbudsCommandTypeClearPairRecord = 0x2F,
/// 降噪等级设置
  TSSBEarbudsCommandTypeAncGain = 0x30,
/// 通透等级设置
  TSSBEarbudsCommandTypeTransparencyGain = 0x31,
/// 3D音效开关设置
  TSSBEarbudsCommandTypeSoundEffect3D = 0x32,
/// 1拖2相关设置
  TSSBEarbudsCommandTypeMultipoint = 0x33,
/// 语音识别开关设置
  TSSBEarbudsCommandTypeVoiceRecognition = 0x34,
/// ANC相关设置
  TSSBEarbudsCommandTypeAnc = 0x35,
/// 动态低音相关设置
  TSSBEarbudsCommandTypeBassEngine = 0x36,
/// 遥控拍照
  TSSBEarbudsCommandTypeRemoteCamera = 0xF3,
/// 是否允许OTA请求
  TSSBEarbudsCommandTypeOtaAllowedRequest = 0xA0,
/// OTA 第一次请求（完整的OTA为 0xA1、0xA2、0xA2。。。）
  TSSBEarbudsCommandTypeBeginOTARequest = 0xA1,
/// OTA 后续请求
  TSSBEarbudsCommandTypeSubseqOTARequest = 0xA2,
/// OTA 状态反馈
  TSSBEarbudsCommandTypeOtaStateNofity = 0xA3,
/// 设置AI对话开关状态
  TSSBEarbudsCommandTypeSetAIChatState = 0xb0,
/// 打开/关闭 录音
  TSSBEarbudsCommandTypeControlAIRecord = 0xb1,
/// 打开摄像头并立即拍照
  TSSBEarbudsCommandTypeStartCameraAndTakephoto = 0xE1,
/// 关闭 拍照、录像、文件传输等
  TSSBEarbudsCommandTypeShutDownRecord = 0xE2,
/// 开始录音
  TSSBEarbudsCommandTypeStartAudioRecord = 0xE5,
///
  TSSBEarbudsCommandTypeWifiSetting = 0xE6,
/// 打开文件传输
  TSSBEarbudsCommandTypeStartFileTransfer = 0xE7,
/// wifi状态变化通知
  TSSBEarbudsCommandTypeWifitStateChanged = 0xEC,
/// 获取存储容量信息
  TSSBEarbudsCommandTypeGetStorageInfo = 0xEA,
/// 获取多媒体文件计数
  TSSBEarbudsCommandTypeGetMediaCount = 0xEF,
/// 设置校准时间
  TSSBEarbudsCommandTypeSetStandardTime = 0xF0,
/// AI录音数据回调
  TSSBEarbudsCommandTypeAiRecordDataNotify = 0xb2,
/// 从片固件版本号
  TSSBEarbudsCommandTypeSubFirmwareVersion = 0xE9,
/// AI识别用图像推送
  TSSBEarbudsCommandTypeAiChatImageNotify = 0xE3,
/// 启动摄像头并立刻开始录像
  TSSBEarbudsCommandTypeTakeVideoRecord = 0xE4,
};

/// EN: Device information TLV type definitions
/// CN: 设备信息 TLV 类型定义
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsDeviceInfoType, open) {
/// 设备电量
  TSSBEarbudsDeviceInfoTypeDevicePower = 0x01,
/// 主片固件版本
  TSSBEarbudsDeviceInfoTypeMainFirmwareVersion = 0x02,
/// 蓝牙名称
  TSSBEarbudsDeviceInfoTypeBluetoothName = 0x03,
/// EQ配置
  TSSBEarbudsDeviceInfoTypeEqSetting = 0x04,
/// 按键配置
  TSSBEarbudsDeviceInfoTypeKeySettings = 0x05,
/// 设备音量
  TSSBEarbudsDeviceInfoTypeDeviceVolume = 0x06,
/// 播放状态
  TSSBEarbudsDeviceInfoTypePlayState = 0x07,
/// 工作模式
  TSSBEarbudsDeviceInfoTypeWorkMode = 0x08,
/// 入耳检测状态
  TSSBEarbudsDeviceInfoTypeInEarStatus = 0x09,
/// 提示音类型
  TSSBEarbudsDeviceInfoTypePromptToneType = 0x0A,
/// 来电自动接听开关
  TSSBEarbudsDeviceInfoTypeAutoAnswer = 0x0B,
/// ANC模式
  TSSBEarbudsDeviceInfoTypeAncMode = 0x0C,
/// 是否支持TWS功能
  TSSBEarbudsDeviceInfoTypeIsTWS = 0x0D,
/// TWS连接状态
  TSSBEarbudsDeviceInfoTypeTwsConnected = 0x0E,
/// LED灯开关
  TSSBEarbudsDeviceInfoTypeLedSwitch = 0x0F,
/// 固件校验和
  TSSBEarbudsDeviceInfoTypeFwChecksum = 0x10,
/// 降噪等级
  TSSBEarbudsDeviceInfoTypeAncGain = 0x11,
/// 通透等级
  TSSBEarbudsDeviceInfoTypeTransparencyGain = 0x12,
/// 降噪等级总数
  TSSBEarbudsDeviceInfoTypeAncGainNum = 0x13,
/// 通透等级总数
  TSSBEarbudsDeviceInfoTypeTransparencyGainNum = 0x14,
/// 所有EQ模式参数
  TSSBEarbudsDeviceInfoTypeAllEqSettings = 0x15,
/// 主从耳信息
  TSSBEarbudsDeviceInfoTypeMainSide = 0x16,
/// 产品颜色
  TSSBEarbudsDeviceInfoTypeProductColor = 0x17,
/// 3D音效状态
  TSSBEarbudsDeviceInfoTypeSoundEffect3D = 0x18,
/// 1拖2开关状态
  TSSBEarbudsDeviceInfoTypeMultipointStatus = 0x19,
/// 已连接的手机相关信息
  TSSBEarbudsDeviceInfoTypeMultipointInfo = 0x1A,
/// 语音识别开关状态
  TSSBEarbudsDeviceInfoTypeVoiceRecognition = 0x1C,
/// ANC淡入淡出开关
  TSSBEarbudsDeviceInfoTypeAncFadeStatus = 0x1D,
/// 动态低音状态
  TSSBEarbudsDeviceInfoTypeBassEngineStatus = 0x1E,
/// 动态低音当前等级
  TSSBEarbudsDeviceInfoTypeBassEngineValue = 0x1F,
/// 动态低音等级范围
  TSSBEarbudsDeviceInfoTypeBassEngineRange = 0x20,
/// 设备支持的能力
  TSSBEarbudsDeviceInfoTypeDeviceCapabilities = 0xFE,
/// 最大数据包大小
  TSSBEarbudsDeviceInfoTypeMaxPacketSize = 0xFF,
/// 耳机仓mac地址
  TSSBEarbudsDeviceInfoTypeCompartmentMacAddress = 0x25,
/// 是否支持通话录音
  TSSBEarbudsDeviceInfoTypeIsSupportCallRecord = 0x26,
/// 防抖支持
  TSSBEarbudsDeviceInfoTypeAntiJitterSupport = 0x80,
/// 本地播放支持
  TSSBEarbudsDeviceInfoTypeLocalPlaySupport = 0x81,
/// 播放时长限制（单位分钟）
  TSSBEarbudsDeviceInfoTypePlayDuration = 0x82,
/// 录音时长限制（单位分钟）
  TSSBEarbudsDeviceInfoTypeAudioRecordDuration = 0x83,
/// 设备所支持的语言列表
  TSSBEarbudsDeviceInfoTypeLanguagesSupport = 0x84,
/// 设备序列号
  TSSBEarbudsDeviceInfoTypeDeviceSerialNum = 0x85,
/// 设备型号
  TSSBEarbudsDeviceInfoTypeDeviceModel = 0x86,
/// 语音指令支持
  TSSBEarbudsDeviceInfoTypeVoiceCommamdSupport = 0x87,
/// 音乐的播放源
  TSSBEarbudsDeviceInfoTypeMusicOriginPlace = 0x88,
};

/// EN: Earbud key operation TLV types
/// CN: 耳机操作设置
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsDeviceOperationType, open) {
/// 左耳短按功能设置
  TSSBEarbudsDeviceOperationTypeLeftShortPress = 0x01,
/// 右耳短按功能设置
  TSSBEarbudsDeviceOperationTypeRightShortPress = 0x02,
/// 左耳双击功能设置
  TSSBEarbudsDeviceOperationTypeLeftDoubleClick = 0x03,
/// 右耳双击功能设置
  TSSBEarbudsDeviceOperationTypeRightDoubleClick = 0x04,
/// 左耳三击功能设置
  TSSBEarbudsDeviceOperationTypeLeftTripleClick = 0x05,
/// 右耳三击功能设置
  TSSBEarbudsDeviceOperationTypeRightTripleClick = 0x06,
/// 左耳长按功能设置
  TSSBEarbudsDeviceOperationTypeLeftLongPress = 0x07,
/// 右耳长按功能设置
  TSSBEarbudsDeviceOperationTypeRightLongPress = 0x08,
};

/// EN: Key mapping functions for earbuds
/// CN: 按键功能
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsKeyFunction, open) {
/// 无作用
  TSSBEarbudsKeyFunctionNone = 0,
/// 回拨电话
  TSSBEarbudsKeyFunctionRedial = 1,
/// 语音助手
  TSSBEarbudsKeyFunctionVoiceAssistant = 2,
/// 上一曲
  TSSBEarbudsKeyFunctionPrevious = 3,
/// 下一曲
  TSSBEarbudsKeyFunctionNext = 4,
/// 音量加
  TSSBEarbudsKeyFunctionVolumeUp = 5,
/// 音量减
  TSSBEarbudsKeyFunctionVolumeDown = 6,
/// 播放暂停
  TSSBEarbudsKeyFunctionPlayPause = 7,
/// 游戏模式
  TSSBEarbudsKeyFunctionGameMode = 8,
/// 降噪设置
  TSSBEarbudsKeyFunctionAncSetting = 9,
/// 拍照
  TSSBEarbudsKeyFunctionTakePhotoSetting = 10,
/// 连续拍照
  TSSBEarbudsKeyFunctionContinuousShooting = 11,
/// 录像启动停止
  TSSBEarbudsKeyFunctionStartOrStopRecording = 12,
/// 录音启动停止
  TSSBEarbudsKeyFunctionStartOrStopAudioRecord = 13,
/// 本地播放/蓝牙播放切换
  TSSBEarbudsKeyFunctionLocalOrBTPlaySwitch = 14,
};

/// EN: Music control TLV type definitions
/// CN: 音乐控制类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsMusicControlType, open) {
/// 调节播放音量
  TSSBEarbudsMusicControlTypeVolume = 0x01,
/// 播放
  TSSBEarbudsMusicControlTypePlay = 0x02,
/// 暂停
  TSSBEarbudsMusicControlTypePause = 0x03,
/// 上一首
  TSSBEarbudsMusicControlTypePrevious = 0x04,
/// 下一首
  TSSBEarbudsMusicControlTypeNext = 0x05,
/// 音量增加一格
  TSSBEarbudsMusicControlTypeUp = 0x06,
/// 音量减少一格
  TSSBEarbudsMusicControlTypeDown = 0x07,
/// 静音和解除静音
  TSSBEarbudsMusicControlTypeMute = 0x08,
};

/// EN: Product color
/// CN: 产品颜色
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsProductColor, open) {
/// 白色
  TSSBEarbudsProductColorWhite = 1,
/// 天青色
  TSSBEarbudsProductColorCyan = 2,
};

/// EN: Wi‑Fi configuration TLV types
/// CN: Wi‑Fi 配置类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWiFiSettingType, open) {
/// model
  TSSBEarbudsWiFiSettingTypeWifiModel = 0x01,
/// ssid
  TSSBEarbudsWiFiSettingTypeWifiSsid = 0x02,
/// password
  TSSBEarbudsWiFiSettingTypeWifiPassword = 0x03,
/// channel
  TSSBEarbudsWiFiSettingTypeWifiChannel = 0x04,
};

/// EN: Wi‑Fi state change types
/// CN: Wi‑Fi 状态类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWiFiState, open) {
/// 热点关闭
  TSSBEarbudsWiFiStateHotPotClose = 0,
/// 热点打开
  TSSBEarbudsWiFiStateHotPotOpen = 1,
/// wifi 打开
  TSSBEarbudsWiFiStateWifiDirectOpen = 2,
/// wifi 连接成功
  TSSBEarbudsWiFiStateWifiDirectConnected = 3,
/// wifi 连接失败
  TSSBEarbudsWiFiStateWifiDirectFailed = 4,
/// wifi 连接超时
  TSSBEarbudsWiFiStateWifiDirectTimeout = 5,
};

/// EN: Earbuds work modes
/// CN: 工作模式
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWorkMode, open) {
/// 普通模式
  TSSBEarbudsWorkModeNormal = 0,
/// 游戏模式
  TSSBEarbudsWorkModeGame = 1,
};

/// EN: Remote camera state
/// CN: 远程相机状态
typedef SWIFT_ENUM(uint8_t, TSSBRemoteCameraState, open) {
/// EN: Exit camera
/// CN: 退出拍照
  TSSBRemoteCameraStateExitCamera = 0,
/// EN: Enter camera
/// CN: 进入拍照
  TSSBRemoteCameraStateEnterCamera = 1,
/// EN: Take photo success
/// CN: 拍照成功
  TSSBRemoteCameraStateTakePhotoSuccess = 2,
/// EN: Take photo failed
/// CN: 拍照失败
  TSSBRemoteCameraStateTakePhotoFailed = 3,
};

@class NSArray;
@class NSData;
/// EN: Objective‑C observer protocol (all methods optional)
/// CN: Objective‑C 观察者协议（方法均为可选）
SWIFT_PROTOCOL("_TtP16TopStepAIBudsSDK21TSSoudbudObserverObjc_")
@protocol TSSoudbudObserverObjc <NSObject>
@optional
- (void)observerDeviceBTStateWithState:(NSNumber * _Nonnull)state peripheral:(CBPeripheral * _Nonnull)peripheral;
- (void)observerPowerChangeWithLeftPower:(NSNumber * _Nullable)leftPower leftCharging:(NSNumber * _Nullable)leftCharging rightPower:(NSNumber * _Nullable)rightPower rightCharging:(NSNumber * _Nullable)rightCharging hubPower:(NSNumber * _Nullable)hubPower hubCharging:(NSNumber * _Nullable)hubCharging;
- (void)observerPlayStateChangeWithIsPlaying:(NSNumber * _Nonnull)isPlaying;
- (void)observerWorkModeChangeWithWorkMode:(NSNumber * _Nonnull)workMode;
- (void)observerInEarStatusChangeWithLeftInEar:(NSNumber * _Nonnull)leftInEar rightInEar:(NSNumber * _Nonnull)rightInEar;
- (void)observerTWSConnectedChangeWithIsConnected:(NSNumber * _Nonnull)isConnected;
- (void)observerEQSettingChangeWithMode:(NSNumber * _Nonnull)mode gains:(NSArray * _Nonnull)gains;
- (void)observerDeviceVolumeChangeWithVolume:(NSNumber * _Nonnull)volume;
- (void)observerANCModeChangeWithMode:(NSNumber * _Nonnull)mode;
- (void)observerANCGainChangeWithGain:(NSNumber * _Nonnull)gain;
- (void)observerTransparencyGainChangeWithGain:(NSNumber * _Nonnull)gain;
- (void)observerSoundEffect3DChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerBassEngineStatusChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerKeySettingsChangeWithSettings:(NSArray * _Nonnull)settings;
- (void)observerPromptToneTypeChangeWithType:(NSNumber * _Nonnull)type;
- (void)observerLEDSwitchChangeWithIsOn:(NSNumber * _Nonnull)isOn;
- (void)observerMainSideChangeWithIsLeft:(NSNumber * _Nonnull)isLeft;
- (void)observerMultipointStatusChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerMultipointInfoChangeWithDevices:(NSArray * _Nonnull)devices;
- (void)observerVoiceRecognitionChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerRemoteCameraControlStateWithState:(NSNumber * _Nonnull)state;
- (void)observerMediaCountDidChangedWithPicCount:(NSNumber * _Nonnull)picCount videoCount:(NSNumber * _Nonnull)videoCount audioCount:(NSNumber * _Nonnull)audioCount;
- (void)observerWifiStateChangedWithState:(NSNumber * _Nonnull)state;
- (void)observerWifiAddressNotifyWithWifiAddress:(NSString * _Nonnull)wifiAddress;
- (void)observerAIRecordNotifyWithRecordData:(NSData * _Nullable)recordData;
- (void)observerAIStateNotifyWithStatus:(NSData * _Nonnull)status;
- (void)observerIsSupportCallRecordNotifyWithStatus:(NSNumber * _Nonnull)status;
- (void)observerAIChatImageNotifyWithImageData:(NSData * _Nonnull)imageData;
- (void)observerSubFirmwareVersionNotifyWithVersion:(NSString * _Nonnull)version;
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK13TopStepAIBuds")
@interface TopStepAIBuds : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;
/// EN: Objective‑C Facade class that exposes stable APIs
/// CN: 面向 Objective‑C 的门面类，提供稳定 API
SWIFT_CLASS("_TtC16TopStepAIBudsSDK17TopStepAIBudsObjc")
@interface TopStepAIBudsObjc : NSObject
/// EN: Enable/disable console logs
/// CN: 开启/关闭控制台日志
/// \param open EN: true to enable, false to disable
/// CN: true 开启，false 关闭
///
+ (void)logsOpen:(BOOL)open;
/// EN: Stop scanning devices
/// CN: 停止扫描设备
+ (void)stopScan;
/// EN: Scan nearby devices and return the found device
/// CN: 扫描附近设备，返回发现的设备
/// \param timeout EN: timeout in seconds; CN: 超时时间（秒）
///
/// \param callback (error, info, peripheral)
///
+ (void)scanDeviceWithTimeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Find BLE device by UUID
/// CN: 通过 UUID 查找 BLE 设备
+ (void)findDeviceWithUuid:(NSString * _Nonnull)uuid timeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Find a connected GATT device by UUID and service ID
/// CN: 通过 UUID 与服务 ID 查找已连接的 GATT 设备
+ (void)findGATTDeviceWithUuid:(NSString * _Nonnull)uuid servicesID:(NSString * _Nonnull)servicesID timeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Connect device by UUID; set observer; initialize and callback
/// CN: 通过 UUID 连接设备；设置观察者；初始化并回调
/// \param uuid 设备 UUID 字符串
///
/// \param connectStyle 连接方式（1=GATT, 2=BLE），默认 BLE
///
/// \param category 设备分类（参见 Swift 枚举 <code>TPSDeviceCategory</code> 的 rawValue）
///
/// \param observer 观察者（可选）
///
/// \param callback (error, info, peripheral)
///
+ (void)connectDeviceWithUuid:(NSString * _Nonnull)uuid connectStyle:(NSNumber * _Nullable)connectStyle category:(NSNumber * _Nonnull)category observer:(id <TSSoudbudObserverObjc> _Nullable)observer callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Disconnect current device and clear observer adapter
/// CN: 断开当前设备并清理观察者适配器
+ (void)disconnectDevice;
/// EN: Get device maximum packet size; returns NSNumber for ObjC nullability
/// CN: 获取设备最大包长；以 NSNumber 返回以兼容 ObjC 的可空语义
+ (void)getMaxPacketSize:(void (^ _Nonnull)(NSError * _Nullable, NSNumber * _Nullable))callback;
/// EN: Fetch device current EQ (mode and band gains)
/// CN: 获取设备当前 EQ（模式与各频段增益）
/// <ul>
///   <li>
///     callback: (error, mode NSNumber, gains NSArray<NSNumber *>?)
///   </li>
/// </ul>
+ (void)getDeviceEqualizer:(void (^ _Nonnull)(NSError * _Nullable, NSNumber * _Nullable, NSArray * _Nullable))callback;
/// EN: Get all preset EQ settings (local list)
/// CN: 获取所有预设 EQ（本地列表）
+ (void)getAllEqualizer:(void (^ _Nonnull)(NSError * _Nullable, NSArray * _Nonnull))callback;
/// EN: Set EQ by mode and gains
/// CN: 设置 EQ 模式与增益
+ (void)setDeviceEqualizerWithMode:(NSNumber * _Nonnull)mode gains:(NSArray * _Nonnull)gains :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Set ANC mode
/// CN: 设置 ANC 模式
+ (void)setANCWithMode:(NSNumber * _Nonnull)mode :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Set device work mode
/// CN: 设置工作模式
+ (void)setWorkModeWithMode:(NSNumber * _Nonnull)mode :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Volume up by one step
/// CN: 音量增加一级
+ (void)volumeUp:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Volume down by one step
/// CN: 音量降低一级
+ (void)volumeDown:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Mute/unmute
/// CN: 静音/取消静音
+ (void)volumeMute:(NSNumber * _Nonnull)mute :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Set volume to value 0~100
/// CN: 设置音量到 0~100
+ (void)volumeChange:(NSNumber * _Nonnull)value :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Trigger find device
/// CN: 触发寻找耳机
+ (void)findDevice:(NSNumber * _Nonnull)start :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Shutdown device
/// CN: 关机设备
+ (void)shutdownDevice:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Restore factory settings
/// CN: 恢复出厂设置
+ (void)resetDevice:(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Toggle AI chat
/// CN: 开启/关闭 AI 对话
+ (void)aiChatStateChange:(NSNumber * _Nonnull)open :(void (^ _Nonnull)(NSError * _Nullable))callback;
/// EN: Start device audio record
/// CN: 启动设备录音
+ (void)startAudioRecord:(void (^ _Nonnull)(BOOL, NSError * _Nullable))callback;
/// EN: Stop/shutdown device record, returns code
/// CN: 停止/关闭设备录音，返回结果码
+ (void)shutDownRecord:(void (^ _Nonnull)(NSNumber * _Nonnull, NSError * _Nullable))callback;
/// EN: Start camera and take a photo with model
/// CN: 启动相机并拍照（模式）
+ (void)takePhoto:(NSNumber * _Nonnull)model :(void (^ _Nonnull)(BOOL, NSError * _Nullable))callback;
/// EN: Start video record
/// CN: 开始录像
+ (void)takeVideoRecord:(void (^ _Nonnull)(BOOL, NSError * _Nullable))callback;
/// EN: Set Wi‑Fi by TLV payloads
/// CN: 以 TLV 设置 Wi‑Fi 参数
+ (void)setSystemWiFiWithModel:(NSNumber * _Nullable)model channel:(NSNumber * _Nullable)channel ssid:(NSString * _Nullable)ssid password:(NSString * _Nullable)password :(void (^ _Nonnull)(NSNumber * _Nonnull, NSError * _Nullable))callback;
/// EN: Configure voice recognition settings by payload
/// CN: 配置语音识别设置（载荷）
+ (void)voiceRecognitionSetting:(NSNumber * _Nonnull)payload :(void (^ _Nonnull)(NSNumber * _Nonnull, NSError * _Nullable))callback;
/// EN: Start ABMate OTA with file meta and callbacks
/// CN: 以文件信息与回调启动 ABMate OTA 升级
+ (void)startABMateOTAWithFilePath:(NSString * _Nullable)filePath updateVersion:(NSString * _Nullable)updateVersion fileSize:(NSNumber * _Nullable)fileSize fileMD5:(NSString * _Nullable)fileMD5 prcVersion:(NSString * _Nullable)prcVersion progress:(void (^ _Nonnull)(NSNumber * _Nonnull))progress completion:(void (^ _Nonnull)(NSNumber * _Nonnull, NSError * _Nullable))completion;
/// EN: Set standard time (unix + timezone minutes)
/// CN: 设置标准时间（时间戳 + 时区分钟）
+ (void)setStandardTimeWithTimestamp:(NSNumber * _Nonnull)timestamp timezoneMinutes:(NSNumber * _Nonnull)timezoneMinutes :(void (^ _Nonnull)(NSNumber * _Nonnull, NSError * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
