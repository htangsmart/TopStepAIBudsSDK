#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef TOPSTEPAIBUDSSDK_SWIFT_H
#define TOPSTEPAIBUDSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import CoreData;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TopStepAIBudsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSEntityDescription;
@class NSManagedObjectContext;
SWIFT_CLASS_NAMED("AIRecord")
@interface AIRecord : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@class NSString;
@interface AIRecord (SWIFT_EXTENSION(TopStepAIBudsSDK))
@property (nonatomic, copy) NSDate * _Nullable createdAt;
@property (nonatomic) double duration;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable filePath;
@property (nonatomic) int64_t fileSize;
@property (nonatomic) int16_t fileState;
@property (nonatomic) int16_t fileType;
@property (nonatomic, copy) NSString * _Nullable fromLanguage;
@property (nonatomic) BOOL hasSummary;
@property (nonatomic) BOOL hasTranslation;
@property (nonatomic) BOOL isProcessed;
@property (nonatomic, copy) NSString * _Nullable notes;
@property (nonatomic, copy) NSString * _Nullable recognize;
@property (nonatomic, copy) NSString * _Nullable recordID;
@property (nonatomic) int16_t recordType;
@property (nonatomic, copy) NSString * _Nullable summary;
@property (nonatomic, copy) NSString * _Nullable tags;
@property (nonatomic, copy) NSString * _Nullable toLanguage;
@property (nonatomic, copy) NSString * _Nullable translate;
@property (nonatomic, copy) NSDate * _Nullable updatedAt;
@end

typedef SWIFT_ENUM(NSInteger, TPSDeviceCategory, open) {
/// 未知
  TPSDeviceCategoryUNKNOW = -1,
/// 手表
  TPSDeviceCategoryWATCH = 0,
/// 戒指
  TPSDeviceCategoryRING = 1,
/// 手机
  TPSDeviceCategoryPHONE = 2,
/// 眼镜
  TPSDeviceCategoryGLASS = 3,
/// 耳机仓
  TPSDeviceCategoryCHARGINGCASE = 4,
/// 耳机
  TPSDeviceCategorySOUNDBUD = 5,
};

typedef SWIFT_ENUM(NSInteger, TPSDeviceConnectStyle, open) {
/// GATT 方式连接
  TPSDeviceConnectStyleGATT = 1,
/// BLE 方式连接
  TPSDeviceConnectStyleBLE = 2,
};

/// 厂商信息对应的设备类型
/// 我们项目号4x/9x瑞昱，5x/8x蓝讯，6绅聚，7恒玄，以下注释中的项目号是对方公司的项目号。
typedef SWIFT_ENUM(NSUInteger, TPSDeviceType, open) {
/// 未知设备
  TPSDeviceTypeUnknown = 0,
/// 瑞昱8773&8763
  TPSDeviceTypeRyTB = 0x5442,
/// 恒玄2700
  TPSDeviceTypeHxTD = 0x5444,
/// 中科895x/568x/569x
  TPSDeviceTypeZkTZ = 0x545A,
/// 瑞昱8762D
  TPSDeviceTypeRyHT = 0x4854,
/// 瑞昱8762c
  TPSDeviceTypeRyXQ = 0x5851,
/// 中科戒指
  TPSDeviceTypeZkZR = 0x5A52,
/// 中科眼镜
  TPSDeviceTypeZkZG = 0x5A47,
/// 文档未描述设备
  TPSDeviceTypeHx0600 = 0x0600,
/// 中科/瑞昱 5452 文档未描述设备
  TPSDeviceTypeZkryTR = 0x5452,
/// 绅聚c001
  TPSDeviceTypeSjC001 = 0xC001,
/// 蓝讯耳机仓
  TPSDeviceTypeZkZC = 0x5A43,
/// 蓝讯耳机
  TPSDeviceTypeZk4206 = 0x4206,
};

typedef SWIFT_ENUM(uint8_t, TPSSDKType, open) {
  TPSSDKTypeUnknow = 0,
  TPSSDKTypeFlywear = 1,
  TPSSDKTypeFitcloud = 2,
  TPSSDKTypeShenjuwm = 3,
  TPSSDKTypeAbmate = 4,
};

typedef SWIFT_ENUM(int16_t, TSAIRecordType, open) {
/// 通话录音
  TSAIRecordTypeCallRecord = 0,
/// AI录音
  TSAIRecordTypeAiRecord = 1,
/// 同声传译
  TSAIRecordTypeTransRecord = 2,
};

typedef SWIFT_ENUM(uint8_t, TSAIState, open) {
  TSAIStateEChatBegin = 0,
  TSAIStateEQuestionStart = 1,
  TSAIStateEQuestionStop = 2,
  TSAIStateEChatFinished = 3,
  TSAIStateEChatError = 4,
};

/// 新协议广播数据信息
/// EN: New protocol advertisement data information
/// CN: 新协议广播数据信息
SWIFT_CLASS("_TtC16TopStepAIBudsSDK13TSAdvDataInfo")
@interface TSAdvDataInfo : NSObject
/// 协议版本号
/// EN: Protocol version number
/// CN: 协议版本号
@property (nonatomic) uint8_t protocolVersion;
/// 产品ID
/// EN: Product ID
/// CN: 产品ID
@property (nonatomic, copy) NSString * _Nonnull productID;
/// 标志位
/// EN: Flag byte
/// CN: 标志位
@property (nonatomic) uint8_t flag;
/// 项目号
/// EN: Project number
/// CN: 项目号
@property (nonatomic, copy) NSString * _Nonnull projectNumber;
/// 子项目号
/// EN: Sub-project number
/// CN: 子项目号
@property (nonatomic) uint8_t subProjectNumber;
- (nonnull instancetype)initWithProtocolVersion:(uint8_t)protocolVersion productID:(NSString * _Nonnull)productID flag:(uint8_t)flag projectNumber:(NSString * _Nonnull)projectNumber subProjectNumber:(uint8_t)subProjectNumber OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// EN: Bluetooth connection state
/// CN: 蓝牙连接状态
typedef SWIFT_ENUM(NSInteger, TSBTConnectState, open) {
  TSBTConnectStateDisconnected = 0,
  TSBTConnectStateConnecting = 1,
  TSBTConnectStateConnected = 2,
  TSBTConnectStateDisconnecting = 3,
/// 连接失败，对设备来说与disconnected状态一致
  TSBTConnectStateFailed = 4,
};

@class CBPeripheral;
@class TSDeviceBaseInfo;
@class CBService;
@class CBCharacteristic;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK10TSBTDevice")
@interface TSBTDevice : NSObject <CBPeripheralDelegate>
/// EN: Current connected peripheral
/// CN: 当前设备
@property (nonatomic, readonly, strong) CBPeripheral * _Nonnull peripheral;
/// EN: Basic information of current device
/// CN: 当前设备信息
@property (nonatomic, readonly, strong) TSDeviceBaseInfo * _Nonnull deviceInfo;
/// EN: Called after discovering services on the peripheral.
/// CN: 发现外设的服务后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Called after discovering characteristics for a specific service.
/// CN: 为指定服务发现特征后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Called when the notification state for a characteristic changes.
/// CN: 当某个特征的通知开关状态发生变化时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a value was written to a characteristic.
/// CN: 向特征写入数据完成后的回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a characteristic’s value is updated.
/// CN: 当读取或通知导致特征值更新时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// 蓝牙错误类型枚举
typedef SWIFT_ENUM(NSInteger, TSBTErrorType, open) {
  TSBTErrorTypeUnkmown = -99999,
  TSBTErrorTypePermissionNotDetermined = -1000,
  TSBTErrorTypePermissionRestricted = -1001,
  TSBTErrorTypePermissionDenied = -1002,
  TSBTErrorTypePermissionUnknown = -1003,
  TSBTErrorTypeStateUnknown = -1100,
  TSBTErrorTypeStateResetting = -1101,
  TSBTErrorTypeStateUnsupported = -1102,
  TSBTErrorTypeStateUnauthorized = -1103,
  TSBTErrorTypeStatePoweredOff = -1104,
  TSBTErrorTypeStateUnknownError = -1105,
  TSBTErrorTypeConnectTimeout = -1200,
  TSBTErrorTypeConnectCancel = -1201,
  TSBTErrorTypeConnectFailed = -1202,
  TSBTErrorTypeConnectBluetoothOff = -1203,
  TSBTErrorTypeConnectInvalidDevice = -1204,
  TSBTErrorTypeConnectLost = -1205,
  TSBTErrorTypeServiceDiscoveryFailed = -1206,
  TSBTErrorTypeCharacteristicDiscoveryFailed = -1207,
  TSBTErrorTypeConnectConflict = -1208,
  TSBTErrorTypeScanTimeout = -1300,
  TSBTErrorTypeScanStop = -1301,
  TSBTErrorTypeScanConflict = -1302,
  TSBTErrorTypeScanBluetoothOff = -1303,
  TSBTErrorTypeWriteFailed = -1400,
  TSBTErrorTypeReadFailed = -1401,
  TSBTErrorTypeNotifyFailed = -1402,
  TSBTErrorTypeInvalidData = -1403,
  TSBTErrorTypeInvalidParameter = -1404,
  TSBTErrorTypeOperationNotSupported = -1405,
  TSBTErrorTypeOperationTimeout = -1406,
  TSBTErrorTypeOperationFailed = -1407,
  TSBTErrorTypeSetDeviceDataFailed = -1408,
  TSBTErrorTypeCommandRepeatFailed = -1409,
  TSBTErrorTypeReceiveEmptyData = -1410,
  TSBTErrorTypeSystemBusy = -1411,
  TSBTErrorTypeFullStorage = -1412,
  TSBTErrorTypeStateLowPower = -1413,
  TSBTErrorTypeSameFirmware = -1513,
  TSBTErrorTypeUnableUpdate = -1514,
  TSBTErrorTypeDataLenthError = -1515,
  TSBTErrorTypeIsFirmwareUploading = -1516,
};

SWIFT_PROTOCOL("_TtP16TopStepAIBudsSDK12TSBTObserver_")
@protocol TSBTObserver <NSObject>
@optional
/// EN: Observe Bluetooth connection state changes of the device
/// CN: 监听设备蓝牙状态
- (void)observerDeviceBTStateWithState:(enum TSBTConnectState)state peripheral:(CBPeripheral * _Nonnull)peripheral;
/// EN: Observe CBCentralManager state changes
/// CN: 监听CBCentralManager状态
- (void)observerCentralManagerStateWithState:(CBManagerState)state;
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK16TSDeviceBaseInfo")
@interface TSDeviceBaseInfo : NSObject
/// 连接该设备使用的sdk
@property (nonatomic) enum TPSSDKType sdkType;
/// 设备厂商类型
@property (nonatomic) enum TPSDeviceType deviceType;
/// 设备分类 手表/戒指/耳机…
@property (nonatomic) enum TPSDeviceCategory deviceCategory;
@property (nonatomic, copy) NSString * _Nonnull mac;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// 新协议广播数据信息（仅在新协议时有效）
/// EN: New protocol advertisement data info (valid only for new protocol)
/// CN: 新协议广播数据信息（仅在新协议时有效）
@property (nonatomic, strong) TSAdvDataInfo * _Nullable advDataInfo;
- (nonnull instancetype)initWithSdkType:(enum TPSSDKType)sdkType deviceType:(enum TPSDeviceType)deviceType deviceCategory:(enum TPSDeviceCategory)deviceCategory mac:(NSString * _Nonnull)mac name:(NSString * _Nonnull)name uuid:(NSString * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithSdkType:(enum TPSSDKType)sdkType deviceType:(enum TPSDeviceType)deviceType deviceCategory:(enum TPSDeviceCategory)deviceCategory mac:(NSString * _Nonnull)mac name:(NSString * _Nonnull)name uuid:(NSString * _Nonnull)uuid advDataInfo:(TSAdvDataInfo * _Nullable)advDataInfo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURL;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK16TSGlassesEISTool")
@interface TSGlassesEISTool : NSObject
+ (void)stabilizeVideoWithInputURL:(NSURL * _Nonnull)inputURL result:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// EN: Bluetooth command category (packet type)
/// CN: 蓝牙指令类型（报文类型）
typedef SWIFT_ENUM(uint8_t, TSSBBTCommandType, open) {
  TSSBBTCommandTypeRequest = 1,
  TSSBBTCommandTypeResponse = 2,
  TSSBBTCommandTypeNotify = 3,
};

@class TSSBEarbudsCommMannger;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK11TSSBEarbuds")
@interface TSSBEarbuds : TSBTDevice
/// EN: Command manager for high-level device operations
/// CN: 指令管理器
@property (nonatomic, readonly, strong) TSSBEarbudsCommMannger * _Nonnull commandManager;
/// EN: Peripheral did discover services callback
/// CN: 发现服务回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Peripheral did discover characteristics for service callback
/// CN: 发现特征回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Notification state update for characteristic callback
/// CN: 设置数据读取特征通知回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Write value result callback
/// CN: 写入特征值结果回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Characteristic value update callback (read/notify)
/// CN: 特征值更新回调（读取/通知）
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

/// EN: Active Noise Cancellation modes
/// CN: ANC 模式
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsAncMode, open) {
/// 普通模式
  TSSBEarbudsAncModeNormal = 0,
/// 降噪模式
  TSSBEarbudsAncModeNoiseCancellation = 1,
/// 通透模式
  TSSBEarbudsAncModeTransparency = 2,
};

/// 耳机蓝牙指令管理类
/// 负责管理与耳机的蓝牙通信，包括：
/// <ol>
///   <li>
///     发送请求到耳机
///   </li>
///   <li>
///     处理耳机的响应
///   </li>
///   <li>
///     管理请求队列和超时
///   </li>
///   <li>
///     处理分包数据
///   </li>
/// </ol>
SWIFT_CLASS("_TtC16TopStepAIBudsSDK22TSSBEarbudsCommMannger")
@interface TSSBEarbudsCommMannger : NSObject
/// EN: Current connected peripheral
/// CN: 当前连接的外设
@property (nonatomic, strong) CBPeripheral * _Nonnull peripheral;
/// EN: Current device base information
/// CN: 当前设备基础信息
@property (nonatomic, strong) TSDeviceBaseInfo * _Nonnull deviceInfo;
/// EN: Class-level configurable maximum packet size in bytes
/// CN: 可配置的类级最大数据包大小（字节）
/// 注意：修改此值可能会影响通信性能
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger MAX_PACKET_SIZE;)
+ (NSInteger)MAX_PACKET_SIZE SWIFT_WARN_UNUSED_RESULT;
+ (void)setMAX_PACKET_SIZE:(NSInteger)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;
@class NSNumber;
enum TSSBEarbudsWorkMode : uint8_t;
enum TSSBEarbudsDeviceOperationType : uint8_t;
enum TSSBEarbudsKeyFunction : uint8_t;
@class NSData;
enum TSSBRemoteCameraState : uint8_t;
@interface TSSBEarbudsCommMannger (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// EN: Get device supported maximum packet size.
/// CN: 获取设备支持的最大数据包大小。
/// EN: Get device supported maximum packet size.
/// CN: 获取设备支持的最大数据包大小。
/// note:
///
/// <ul>
///   <li>
///     result second param: NSNumber(UInt8/Int)，表示最大包长（字节数）。
///   </li>
///   <li>
///     Objective‑C 调用示例：<code>- (void)getMaxPacketSizeWithResult:(void(^)(NSError *error, NSNumber *size))result;</code>
///   </li>
/// </ul>
- (void)getMaxPacketSizeWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSNumber * _Nullable))result;
/// EN: Get all preset equalizer settings (local list).
/// CN: 获取所有预设 EQ 设置（本地列表）。
/// [{“type”:NSNumber(Int),“name”:String,“gains”:[NSNumber(Int8),“isCustom”:NSNumber(bool)]}]
- (void)getAllEqualizerWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSArray<NSDictionary<NSString *, id> *> * _Nonnull))result;
/// EN: Get current EQ mode and gains from device.
/// CN: 从设备获取当前 EQ 模式与增益。
/// Objective‑C 兼容：将返回值改为 NSDictionary
/// { “eqMode”: NSNumber(UInt8), “eqGain”: [NSNumber(Int8)] }
- (void)getDeviceEqualizerWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSDictionary * _Nullable))result;
/// EN: Get power and charging states for left/right earbuds and case.
/// CN: 获取左右耳机与充电仓的电量Int 0~100与充电状态bool（分离返回值）。
/// Objective‑C 兼容：使用 NSNumber? 表示 UInt8/Bool
- (void)getDevicePowerWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSNumber * _Nullable, NSNumber * _Nullable, NSNumber * _Nullable, NSNumber * _Nullable, NSNumber * _Nullable, NSNumber * _Nullable))result;
/// EN: Get device key operation-function mappings.
/// CN: 获取设备按键操作与功能映射关系。
/// Objective‑C 兼容：将返回值改为并行数组字典
/// { “operations”: [NSNumber(UInt8)], “functions”: [NSNumber(UInt8)] }
- (void)getDeviceKeySettingsWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSDictionary * _Nullable))result;
/// EN: Query whether device supports TWS.
/// CN: 查询设备是否支持 TWS。
- (void)getIsSupportTWSWithResult:(void (^ _Nonnull)(NSError * _Nullable, BOOL))result;
/// EN: Check TWS connection state.
/// CN: 查询 TWS 是否已连接。
- (void)getIsTWSConnectedWithResult:(void (^ _Nonnull)(NSError * _Nullable, BOOL))result;
/// EN: Get main firmware version string.
/// CN: 获取主片固件版本号。
- (void)getMainFirmwareVersionWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable))result;
/// EN: Get sub-chip firmware version string.
/// CN: 获取从片固件版本号。
- (void)getSubFirmwareVersionWithResult:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nullable))result;
/// EN: Set device EQ with mode and per-band gains.
/// CN: 设置设备 EQ 模式与各频段增益。
/// Objective‑C 兼容：gains 使用 [NSNumber]
- (void)setDeviceEqualizerWithMode:(uint8_t)mode gains:(NSArray<NSNumber *> * _Nonnull)gains result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Set ANC mode.
/// CN: 设置 ANC 模式。
- (void)setANCWithMode:(enum TSSBEarbudsAncMode)mode result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Set work mode.
/// CN: 设置工作模式。
- (void)setWorkModeWithMode:(enum TSSBEarbudsWorkMode)mode result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Restore device to factory settings.
/// CN: 设备恢复出厂设置。
- (void)resetDeviceWithResult:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Set key operation-function mapping for device.
/// CN: 设置耳机按键的操作-功能映射。
- (void)setDeviceOperationWithOperation:(enum TSSBEarbudsDeviceOperationType)operation function:(enum TSSBEarbudsKeyFunction)function result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Trigger finding earbuds (play sound/locate).
/// CN: 触发寻找耳机（发声/定位）。
- (void)findDeviceWithStart:(BOOL)start result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Get supported voice prompt languages.
/// CN: 获取设备支持的提示音语言。
- (void)getSupportLanguagesWithResult:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))result;
/// EN: Set current language for voice prompts. 0 English, 1 Chinese.
/// CN: 设置提示音语言。0 英文，1 中文。
- (void)setCurrentLanguagesWithLanguageCode:(NSInteger)languageCode result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Query multiple device information items in one request.
/// CN: 一次请求查询多个设备信息项。
- (void)queryABMateDeviceinfoWithResult:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))result;
/// EN: Update app remote camera state to device.
/// CN: 将 App 的远程拍照状态同步到设备。
- (void)updateCameraStateWithCameraState:(enum TSSBRemoteCameraState)cameraState result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Start ABMate OTA with file meta and callbacks.
/// CN: 以文件信息与回调启动 ABMate OTA 升级。
/// Objective‑C 兼容：fileSize 使用 NSNumber?
- (void)startABMateOTAWithFilePath:(NSString * _Nullable)filePath updateVersion:(NSString * _Nullable)updateVersion fileSize:(NSNumber * _Nullable)fileSize fileMD5:(NSString * _Nullable)fileMD5 prcVersion:(NSString * _Nullable)prcVersion progress:(void (^ _Nonnull)(NSInteger))progress result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Query storage usage (used and remaining space).
/// CN: 查询存储信息（已用与剩余空间）。
/// Objective‑C 兼容：回调使用 NSNumber 表示 UInt32
- (void)queryABMateStorageInfoWithResult:(void (^ _Nonnull)(NSNumber * _Nonnull, NSNumber * _Nonnull, NSError * _Nullable))result;
/// EN: Query media count on device.
/// CN: 查询设备端媒体数量。
- (void)queryABMateMediaCountWithResult:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Start audio recording on device.
/// CN: 启动设备端音频录制。
- (void)startABMateAudioRecordWithResult:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Stop/Shutdown device recording and return code.
/// CN: 停止/关闭设备录音并返回结果码。
- (void)shutDownABMateRecordWithResult:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))result;
/// EN: Start camera and take a photo with mode.
/// CN: 启动相机并按模式拍照。
- (void)takePhotoWithModel:(uint8_t)model result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Start video recording.
/// CN: 开始录像。
- (void)takeVideoRecordWithResult:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// EN: Increase volume by one step.
/// CN: 音量增加一级。
- (void)volumeUpWithResult:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Decrease volume by one step.
/// CN: 音量降低一级。
- (void)volumeDownWithResult:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Mute or unmute device.
/// CN: 设置设备静音/取消静音。
- (void)volumeMuteWithMute:(BOOL)mute result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Set volume to specific value (0-100).
/// CN: 设置音量为指定值（0-100）。
- (void)volumeChangeWithVolume:(uint8_t)volume result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Toggle AI chat state (open/close).
/// CN: 开启/关闭 AI 对话。
- (void)aiChatStateChangeWithOpen:(BOOL)open result:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Shutdown device.
/// CN: 关机设备。
- (void)shutdownDeviceWithResult:(void (^ _Nonnull)(NSError * _Nullable))result;
/// EN: Configure voice recognition settings by payload.
/// CN: 通过载荷配置语音识别设置。
- (void)voiceRecognitionSettingWithPayload:(uint8_t)payload result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
/// @brief 设置WiFi信息（TLV格式）
/// @chinese 以TLV方式设置WiFi信息，包含model、ssid、password、channel
/// @param model
/// EN: WiFi mode, 1 byte
/// CN: WiFi模式，1字节
/// @param channel
/// EN: WiFi channel, 1 byte
/// CN: WiFi频道，1字节
/// @param ssid
/// EN: WiFi SSID, max 32 bytes, must be valid UTF-8
/// CN: WiFi名称，最长32字节，必须为合法UTF-8
/// @param password
/// EN: WiFi password, max 32 bytes, must be valid UTF-8
/// CN: WiFi密码，最长32字节，必须为合法UTF-8
/// @param result
/// EN: Callback, true if success, false and error if failed
/// CN: 回调，成功true，失败false和错误信息
/// Objective‑C 兼容：model/channel 使用 NSNumber?
- (void)setSystemWiFiWithModel:(NSNumber * _Nullable)model channel:(NSNumber * _Nullable)channel ssid:(NSString * _Nullable)ssid password:(NSString * _Nullable)password result:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))result;
/// @brief 启动文件传输模式
/// @chinese 启动文件传输模式，处理不同的返回码
/// @param result
/// EN: Callback, true if success, false and error if failed
/// CN: 回调，成功true，失败false和错误信息
- (void)startFileTransferWithResult:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))result;
/// @brief 设置标准时间
/// @chinese 设置设备的标准时间（Unix时间戳+时区信息）
/// @param timestamp
/// EN: Unix timestamp, 4 bytes, seconds
/// CN: Unix时间戳，4字节，单位秒
/// @param timezoneMinutes
/// EN: Timezone offset in minutes, signed 16-bit integer
/// CN: 时区偏移，单位分钟，有符号16位整数
/// @param result
/// EN: Callback, returns result code (UInt8) and error if failed
/// CN: 回调，返回结果码(UInt8)，失败时返回错误信息
- (void)setABMateStandardTimeWithTimestamp:(uint32_t)timestamp timezoneMinutes:(int16_t)timezoneMinutes result:(void (^ _Nonnull)(uint8_t, NSError * _Nullable))result;
/// @brief 设置设备AI 录音的开启/关闭
/// @param recordType
/// 录音类型 0现场录音 1通话录音
/// @param status
/// 开启/关闭 0关闭 1开启
- (void)controlABMetaRecordWithRecordType:(uint8_t)recordType status:(uint8_t)status result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
@end

/// EN: Bluetooth command codes for earbuds protocol
/// CN: 耳机协议的蓝牙指令码
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsCommandType, open) {
/// EQ音效设置
  TSSBEarbudsCommandTypeEq = 0x20,
/// 音乐播放控制
  TSSBEarbudsCommandTypeMusicControl = 0x21,
/// 耳机操作设置
  TSSBEarbudsCommandTypeDeviceOperation = 0x22,
/// 定时关机设置
  TSSBEarbudsCommandTypeAutoShutdown = 0x23,
/// 设备端恢复出厂设置
  TSSBEarbudsCommandTypeFactoryReset = 0x24,
/// 工作模式设置
  TSSBEarbudsCommandTypeWorkMode = 0x25,
/// 入耳检测设置
  TSSBEarbudsCommandTypeInEarDetect = 0x26,
/// 获取设备信息
  TSSBEarbudsCommandTypeDeviceInfo = 0x27,
/// 设备端上报设备信息
  TSSBEarbudsCommandTypeDeviceInfoNotify = 0x28,
/// 提示音设置
  TSSBEarbudsCommandTypePromptTone = 0x29,
/// 查找耳机
  TSSBEarbudsCommandTypeFindDevice = 0x2A,
/// 来电自动接听设置
  TSSBEarbudsCommandTypeAutoAnswer = 0x2B,
/// ANC模式设置
  TSSBEarbudsCommandTypeAncMode = 0x2C,
/// 设备蓝牙名设置
  TSSBEarbudsCommandTypeBluetoothName = 0x2D,
/// LED灯开关设置
  TSSBEarbudsCommandTypeLedMode = 0x2E,
/// 清除与手机的所有配对记录
  TSSBEarbudsCommandTypeClearPairRecord = 0x2F,
/// 降噪等级设置
  TSSBEarbudsCommandTypeAncGain = 0x30,
/// 通透等级设置
  TSSBEarbudsCommandTypeTransparencyGain = 0x31,
/// 3D音效开关设置
  TSSBEarbudsCommandTypeSoundEffect3D = 0x32,
/// 1拖2相关设置
  TSSBEarbudsCommandTypeMultipoint = 0x33,
/// 语音识别开关设置
  TSSBEarbudsCommandTypeVoiceRecognition = 0x34,
/// ANC相关设置
  TSSBEarbudsCommandTypeAnc = 0x35,
/// 动态低音相关设置
  TSSBEarbudsCommandTypeBassEngine = 0x36,
/// 遥控拍照
  TSSBEarbudsCommandTypeRemoteCamera = 0xF3,
/// 是否允许OTA请求
  TSSBEarbudsCommandTypeOtaAllowedRequest = 0xA0,
/// OTA 第一次请求（完整的OTA为 0xA1、0xA2、0xA2。。。）
  TSSBEarbudsCommandTypeBeginOTARequest = 0xA1,
/// OTA 后续请求
  TSSBEarbudsCommandTypeSubseqOTARequest = 0xA2,
/// OTA 状态反馈
  TSSBEarbudsCommandTypeOtaStateNofity = 0xA3,
/// 设置AI对话开关状态
  TSSBEarbudsCommandTypeSetAIChatState = 0xb0,
/// 打开/关闭 录音
  TSSBEarbudsCommandTypeControlAIRecord = 0xb1,
/// 打开摄像头并立即拍照
  TSSBEarbudsCommandTypeStartCameraAndTakephoto = 0xE1,
/// 关闭 拍照、录像、文件传输等
  TSSBEarbudsCommandTypeShutDownRecord = 0xE2,
/// 开始录音
  TSSBEarbudsCommandTypeStartAudioRecord = 0xE5,
///
  TSSBEarbudsCommandTypeWifiSetting = 0xE6,
/// 打开文件传输
  TSSBEarbudsCommandTypeStartFileTransfer = 0xE7,
/// wifi状态变化通知
  TSSBEarbudsCommandTypeWifitStateChanged = 0xEC,
/// 获取存储容量信息
  TSSBEarbudsCommandTypeGetStorageInfo = 0xEA,
/// 获取多媒体文件计数
  TSSBEarbudsCommandTypeGetMediaCount = 0xEF,
/// 设置校准时间
  TSSBEarbudsCommandTypeSetStandardTime = 0xF0,
/// AI录音数据回调
  TSSBEarbudsCommandTypeAiRecordDataNotify = 0xb2,
/// 从片固件版本号
  TSSBEarbudsCommandTypeSubFirmwareVersion = 0xE9,
/// AI识别用图像推送
  TSSBEarbudsCommandTypeAiChatImageNotify = 0xE3,
/// 启动摄像头并立刻开始录像
  TSSBEarbudsCommandTypeTakeVideoRecord = 0xE4,
};

/// EN: Device information TLV type definitions
/// CN: 设备信息 TLV 类型定义
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsDeviceInfoType, open) {
/// 设备电量
  TSSBEarbudsDeviceInfoTypeDevicePower = 0x01,
/// 主片固件版本
  TSSBEarbudsDeviceInfoTypeMainFirmwareVersion = 0x02,
/// 蓝牙名称
  TSSBEarbudsDeviceInfoTypeBluetoothName = 0x03,
/// EQ配置
  TSSBEarbudsDeviceInfoTypeEqSetting = 0x04,
/// 按键配置
  TSSBEarbudsDeviceInfoTypeKeySettings = 0x05,
/// 设备音量
  TSSBEarbudsDeviceInfoTypeDeviceVolume = 0x06,
/// 播放状态
  TSSBEarbudsDeviceInfoTypePlayState = 0x07,
/// 工作模式
  TSSBEarbudsDeviceInfoTypeWorkMode = 0x08,
/// 入耳检测状态
  TSSBEarbudsDeviceInfoTypeInEarStatus = 0x09,
/// 提示音类型
  TSSBEarbudsDeviceInfoTypePromptToneType = 0x0A,
/// 来电自动接听开关
  TSSBEarbudsDeviceInfoTypeAutoAnswer = 0x0B,
/// ANC模式
  TSSBEarbudsDeviceInfoTypeAncMode = 0x0C,
/// 是否支持TWS功能
  TSSBEarbudsDeviceInfoTypeIsTWS = 0x0D,
/// TWS连接状态
  TSSBEarbudsDeviceInfoTypeTwsConnected = 0x0E,
/// LED灯开关
  TSSBEarbudsDeviceInfoTypeLedSwitch = 0x0F,
/// 固件校验和
  TSSBEarbudsDeviceInfoTypeFwChecksum = 0x10,
/// 降噪等级
  TSSBEarbudsDeviceInfoTypeAncGain = 0x11,
/// 通透等级
  TSSBEarbudsDeviceInfoTypeTransparencyGain = 0x12,
/// 降噪等级总数
  TSSBEarbudsDeviceInfoTypeAncGainNum = 0x13,
/// 通透等级总数
  TSSBEarbudsDeviceInfoTypeTransparencyGainNum = 0x14,
/// 所有EQ模式参数
  TSSBEarbudsDeviceInfoTypeAllEqSettings = 0x15,
/// 主从耳信息
  TSSBEarbudsDeviceInfoTypeMainSide = 0x16,
/// 产品颜色
  TSSBEarbudsDeviceInfoTypeProductColor = 0x17,
/// 3D音效状态
  TSSBEarbudsDeviceInfoTypeSoundEffect3D = 0x18,
/// 1拖2开关状态
  TSSBEarbudsDeviceInfoTypeMultipointStatus = 0x19,
/// 已连接的手机相关信息
  TSSBEarbudsDeviceInfoTypeMultipointInfo = 0x1A,
/// 语音识别开关状态
  TSSBEarbudsDeviceInfoTypeVoiceRecognition = 0x1C,
/// ANC淡入淡出开关
  TSSBEarbudsDeviceInfoTypeAncFadeStatus = 0x1D,
/// 动态低音状态
  TSSBEarbudsDeviceInfoTypeBassEngineStatus = 0x1E,
/// 动态低音当前等级
  TSSBEarbudsDeviceInfoTypeBassEngineValue = 0x1F,
/// 动态低音等级范围
  TSSBEarbudsDeviceInfoTypeBassEngineRange = 0x20,
/// 设备支持的能力
  TSSBEarbudsDeviceInfoTypeDeviceCapabilities = 0xFE,
/// 最大数据包大小
  TSSBEarbudsDeviceInfoTypeMaxPacketSize = 0xFF,
/// 耳机仓mac地址
  TSSBEarbudsDeviceInfoTypeCompartmentMacAddress = 0x25,
/// 是否支持通话录音
  TSSBEarbudsDeviceInfoTypeIsSupportCallRecord = 0x26,
/// 防抖支持
  TSSBEarbudsDeviceInfoTypeAntiJitterSupport = 0x80,
/// 本地播放支持
  TSSBEarbudsDeviceInfoTypeLocalPlaySupport = 0x81,
/// 播放时长限制（单位分钟）
  TSSBEarbudsDeviceInfoTypePlayDuration = 0x82,
/// 录音时长限制（单位分钟）
  TSSBEarbudsDeviceInfoTypeAudioRecordDuration = 0x83,
/// 设备所支持的语言列表
  TSSBEarbudsDeviceInfoTypeLanguagesSupport = 0x84,
/// 设备序列号
  TSSBEarbudsDeviceInfoTypeDeviceSerialNum = 0x85,
/// 设备型号
  TSSBEarbudsDeviceInfoTypeDeviceModel = 0x86,
/// 语音指令支持
  TSSBEarbudsDeviceInfoTypeVoiceCommamdSupport = 0x87,
/// 音乐的播放源
  TSSBEarbudsDeviceInfoTypeMusicOriginPlace = 0x88,
};

/// EN: Earbud key operation TLV types
/// CN: 耳机操作设置
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsDeviceOperationType, open) {
/// 左耳短按功能设置
  TSSBEarbudsDeviceOperationTypeLeftShortPress = 0x01,
/// 右耳短按功能设置
  TSSBEarbudsDeviceOperationTypeRightShortPress = 0x02,
/// 左耳双击功能设置
  TSSBEarbudsDeviceOperationTypeLeftDoubleClick = 0x03,
/// 右耳双击功能设置
  TSSBEarbudsDeviceOperationTypeRightDoubleClick = 0x04,
/// 左耳三击功能设置
  TSSBEarbudsDeviceOperationTypeLeftTripleClick = 0x05,
/// 右耳三击功能设置
  TSSBEarbudsDeviceOperationTypeRightTripleClick = 0x06,
/// 左耳长按功能设置
  TSSBEarbudsDeviceOperationTypeLeftLongPress = 0x07,
/// 右耳长按功能设置
  TSSBEarbudsDeviceOperationTypeRightLongPress = 0x08,
};

/// EN: Key mapping functions for earbuds
/// CN: 按键功能
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsKeyFunction, open) {
/// 无作用
  TSSBEarbudsKeyFunctionNone = 0,
/// 回拨电话
  TSSBEarbudsKeyFunctionRedial = 1,
/// 语音助手
  TSSBEarbudsKeyFunctionVoiceAssistant = 2,
/// 上一曲
  TSSBEarbudsKeyFunctionPrevious = 3,
/// 下一曲
  TSSBEarbudsKeyFunctionNext = 4,
/// 音量加
  TSSBEarbudsKeyFunctionVolumeUp = 5,
/// 音量减
  TSSBEarbudsKeyFunctionVolumeDown = 6,
/// 播放暂停
  TSSBEarbudsKeyFunctionPlayPause = 7,
/// 游戏模式
  TSSBEarbudsKeyFunctionGameMode = 8,
/// 降噪设置
  TSSBEarbudsKeyFunctionAncSetting = 9,
/// 拍照
  TSSBEarbudsKeyFunctionTakePhotoSetting = 10,
/// 连续拍照
  TSSBEarbudsKeyFunctionContinuousShooting = 11,
/// 录像启动停止
  TSSBEarbudsKeyFunctionStartOrStopRecording = 12,
/// 录音启动停止
  TSSBEarbudsKeyFunctionStartOrStopAudioRecord = 13,
/// 本地播放/蓝牙播放切换
  TSSBEarbudsKeyFunctionLocalOrBTPlaySwitch = 14,
};

/// EN: Music control TLV type definitions
/// CN: 音乐控制类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsMusicControlType, open) {
/// 调节播放音量
  TSSBEarbudsMusicControlTypeVolume = 0x01,
/// 播放
  TSSBEarbudsMusicControlTypePlay = 0x02,
/// 暂停
  TSSBEarbudsMusicControlTypePause = 0x03,
/// 上一首
  TSSBEarbudsMusicControlTypePrevious = 0x04,
/// 下一首
  TSSBEarbudsMusicControlTypeNext = 0x05,
/// 音量增加一格
  TSSBEarbudsMusicControlTypeUp = 0x06,
/// 音量减少一格
  TSSBEarbudsMusicControlTypeDown = 0x07,
/// 静音和解除静音
  TSSBEarbudsMusicControlTypeMute = 0x08,
};

/// EN: Product color
/// CN: 产品颜色
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsProductColor, open) {
/// 白色
  TSSBEarbudsProductColorWhite = 1,
/// 天青色
  TSSBEarbudsProductColorCyan = 2,
};

/// EN: Wi‑Fi configuration TLV types
/// CN: Wi‑Fi 配置类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWiFiSettingType, open) {
/// model
  TSSBEarbudsWiFiSettingTypeWifiModel = 0x01,
/// ssid
  TSSBEarbudsWiFiSettingTypeWifiSsid = 0x02,
/// password
  TSSBEarbudsWiFiSettingTypeWifiPassword = 0x03,
/// channel
  TSSBEarbudsWiFiSettingTypeWifiChannel = 0x04,
};

/// EN: Wi‑Fi state change types
/// CN: Wi‑Fi 状态类型
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWiFiState, open) {
/// 热点关闭
  TSSBEarbudsWiFiStateHotPotClose = 0,
/// 热点打开
  TSSBEarbudsWiFiStateHotPotOpen = 1,
/// wifi 打开
  TSSBEarbudsWiFiStateWifiDirectOpen = 2,
/// wifi 连接成功
  TSSBEarbudsWiFiStateWifiDirectConnected = 3,
/// wifi 连接失败
  TSSBEarbudsWiFiStateWifiDirectFailed = 4,
/// wifi 连接超时
  TSSBEarbudsWiFiStateWifiDirectTimeout = 5,
};

/// EN: Earbuds work modes
/// CN: 工作模式
typedef SWIFT_ENUM(uint8_t, TSSBEarbudsWorkMode, open) {
/// 普通模式
  TSSBEarbudsWorkModeNormal = 0,
/// 游戏模式
  TSSBEarbudsWorkModeGame = 1,
};

/// EN: Remote camera state
/// CN: 远程相机状态
typedef SWIFT_ENUM(uint8_t, TSSBRemoteCameraState, open) {
/// EN: Exit camera
/// CN: 退出拍照
  TSSBRemoteCameraStateExitCamera = 0,
/// EN: Enter camera
/// CN: 进入拍照
  TSSBRemoteCameraStateEnterCamera = 1,
/// EN: Take photo success
/// CN: 拍照成功
  TSSBRemoteCameraStateTakePhotoSuccess = 2,
/// EN: Take photo failed
/// CN: 拍照失败
  TSSBRemoteCameraStateTakePhotoFailed = 3,
};

SWIFT_CLASS("_TtC16TopStepAIBudsSDK15TSSBWiFiManager")
@interface TSSBWiFiManager : NSObject
+ (void)connectToWifiWithSsid:(NSString * _Nonnull)ssid password:(NSString * _Nonnull)password isweb:(BOOL)isweb result:(void (^ _Nonnull)(BOOL))result;
/// 调试WiFi连接状态
+ (void)debugWiFiStatus;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// EN: Soundbuds event observer protocol. Receives status/config/media/Wi‑Fi/AI notifications.
/// CN: 耳机事件观察者协议。用于接收状态、配置、媒体、Wi‑Fi、AI 等通知。
SWIFT_PROTOCOL("_TtP16TopStepAIBudsSDK17TSSoudbudObserver_")
@protocol TSSoudbudObserver <TSBTObserver>
@optional
/// EN: Observe power and charging state changes
/// CN: 监听电量变化
/// note:
/// 为了兼容 Objective‑C，这里使用 NSNumber?
/// <ul>
///   <li>
///     leftPower/rightPower/hubPower: UInt8，取值 0~100（电量百分比），请用 <code>unsigned char</code>/<code>NSUInteger</code> 封装为 NSNumber
///   </li>
///   <li>
///     leftCharging/rightCharging/hubCharging: Bool（0/1），请用 <code>BOOL</code>/<code>bool</code> 封装为 NSNumber（<code>@YES/@NO</code>）
///   </li>
/// </ul>
/// \param leftPower EN: Left earbud battery, CN: 左耳电量
///
/// \param rightPower EN: Right earbud battery, CN: 右耳电量
///
/// \param hubPower EN: Case battery, CN: 充电仓电量
/// EN: Observe power and charging state changes
/// CN: 监听电量与充电状态变化
///
- (void)observerPowerChangeWithLeftPower:(NSNumber * _Nullable)leftPower leftCharging:(NSNumber * _Nullable)leftCharging rightPower:(NSNumber * _Nullable)rightPower rightCharging:(NSNumber * _Nullable)rightCharging hubPower:(NSNumber * _Nullable)hubPower hubCharging:(NSNumber * _Nullable)hubCharging;
/// EN: Observe playback state changes
/// CN: 监听播放状态变化
/// \param isPlaying 是否正在播放
///
- (void)observerPlayStateChangeWithIsPlaying:(BOOL)isPlaying;
/// EN: Observe work mode changes
/// CN: 监听工作模式变化
/// \param workMode 工作模式
///
- (void)observerWorkModeChangeWithWorkMode:(enum TSSBEarbudsWorkMode)workMode;
/// EN: Observe in‑ear detection state changes
/// CN: 监听入耳检测状态变化
/// \param leftInEar EN: Left ear in‑ear, CN: 左耳是否入耳
///
/// \param rightInEar EN: Right ear in‑ear, CN: 右耳是否入耳
///
- (void)observerInEarStatusChangeWithLeftInEar:(BOOL)leftInEar rightInEar:(BOOL)rightInEar;
/// EN: Observe TWS connection state changes
/// CN: 监听TWS连接状态变化
/// \param isConnected 是否已连接
///
- (void)observerTWSConnectedChangeWithIsConnected:(BOOL)isConnected;
/// EN: Observe EQ settings changes
/// CN: 监听EQ设置变化
/// note:
/// 为了兼容 Objective‑C，<code>gains</code> 使用 <code>[NSNumber]</code>
/// <ul>
///   <li>
///     mode: UInt8（EQ 模式，<code>unsigned char</code>）
///   </li>
///   <li>
///     gains: Int8 数组（每段EQ增益，范围 -128~127），请用 <code>NSNumber numberWithChar:</code> 或 <code>@(int8_tValue)</code> 封装
///   </li>
/// </ul>
/// \param mode EN: EQ mode, CN: EQ模式
///
/// \param gains EN: EQ band gains, CN: EQ增益值数组
/// EN: Observe EQ settings changes
/// CN: 监听EQ设置变化
///
- (void)observerEQSettingChangeWithMode:(uint8_t)mode gains:(NSArray<NSNumber *> * _Nonnull)gains;
/// EN: Observe device volume changes
/// CN: 监听设备音量变化
/// \param volume 音量值
///
- (void)observerDeviceVolumeChangeWithVolume:(uint8_t)volume;
/// EN: Observe ANC mode changes
/// CN: 监听ANC模式变化
/// \param mode ANC模式
///
- (void)observerANCModeChangeWithMode:(enum TSSBEarbudsAncMode)mode;
/// EN: Observe ANC gain changes
/// CN: 监听降噪等级变化
/// \param gain 降噪等级
///
- (void)observerANCGainChangeWithGain:(uint8_t)gain;
/// EN: Observe transparency gain changes
/// CN: 监听通透等级变化
/// \param gain 通透等级
///
- (void)observerTransparencyGainChangeWithGain:(uint8_t)gain;
/// EN: Observe 3D sound effect enable/disable
/// CN: 监听3D音效状态变化
/// \param isEnabled 是否启用
///
- (void)observerSoundEffect3DChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Observe Bass Engine enable/disable
/// CN: 监听动态低音状态变化
/// \param isEnabled 是否启用
///
- (void)observerBassEngineStatusChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Observe key settings changes
/// CN: 监听按键配置变化
/// note:
/// 为了兼容 Objective‑C，元组数组改为并行数组 <code>[NSNumber]</code>
/// <ul>
///   <li>
///     operations: <code>TSSBEarbudsDeviceOperationType.rawValue</code>（UInt8），请用 <code>unsigned char</code> 封装为 NSNumber
///   </li>
///   <li>
///     functions: <code>TSSBEarbudsKeyFunction.rawValue</code>（UInt8），请用 <code>unsigned char</code> 封装为 NSNumber
///   </li>
/// </ul>
/// \param operation EN: Operation type, CN: 操作类型
///
/// \param function EN: Function type, CN: 功能类型
/// EN: Observe key settings changes
/// CN: 监听按键配置变化
///
- (void)observerKeySettingsChangeWithOperations:(NSArray<NSNumber *> * _Nonnull)operations functions:(NSArray<NSNumber *> * _Nonnull)functions;
/// EN: Observe prompt tone type changes
/// CN: 监听提示音类型变化
/// \param type 提示音类型
///
- (void)observerPromptToneTypeChangeWithType:(uint8_t)type;
/// EN: Observe LED switch state changes
/// CN: 监听LED灯开关状态变化
/// \param isOn 是否开启
///
- (void)observerLEDSwitchChangeWithIsOn:(BOOL)isOn;
/// EN: Observe main/side change (left/right primary)
/// CN: 监听主从耳信息变化
/// \param isLeft 是否左耳为主耳
///
- (void)observerMainSideChangeWithIsLeft:(BOOL)isLeft;
/// EN: Observe multipoint enable state changes
/// CN: 监听1拖2开关状态变化
/// \param isEnabled 是否启用
///
- (void)observerMultipointStatusChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Observe multipoint device list and connection changes
/// CN: 监听已连接的手机相关信息变化
/// note:
/// 为了兼容 Objective‑C，使用字典数组，每个字典包含：
/// <ul>
///   <li>
///     “mac”: [NSNumber]（每个元素为 UInt8，建议用 <code>unsigned char</code> 封装）
///   </li>
///   <li>
///     “isConnected”: NSNumber(BOOL)，请使用 <code>@YES/@NO</code>
///   </li>
///   <li>
///     “name”: NSString
///   </li>
/// </ul>
/// \param devices EN: List of (MAC, state, name), CN: 设备信息数组（MAC/连接状态/名称）
/// EN: Observe multipoint device list and states
/// CN: 监听多点连接设备列表及其连接状态
///
- (void)observerMultipointInfoChangeWithDevices:(NSArray<NSDictionary *> * _Nonnull)devices;
/// EN: Observe voice recognition enable state changes
/// CN: 监听语音识别开关状态变化
/// \param isEnabled 是否启用
///
- (void)observerVoiceRecognitionChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Observe remote camera control state
/// CN: 监听遥控拍照状态
/// \param state 0:退出拍照，1:进入拍照，2:拍照
///
- (void)observerRemoteCameraControlStateWithState:(uint8_t)state;
/// EN: Observe media counts (picture/video/audio)
/// CN: 监听多媒体数量
- (void)observerMediaCountDidChangedWithPicCount:(uint32_t)picCount videoCount:(uint32_t)videoCount audioCount:(uint32_t)audioCount;
/// EN: Observe Wi‑Fi state changes
/// CN: wifi状态变化
- (void)observerWifiStateChangedWithState:(enum TSSBEarbudsWiFiState)state;
/// EN: Observe Wi‑Fi address (IP or Hotspot info)
/// CN: wifi address（IP 或热点信息）
- (void)observerWifiAddressNotifyWithWifiAddress:(NSString * _Nonnull)wifiAddress;
/// EN: Observe AI record data stream
/// CN: ai 录音数据
- (void)observerAIRecordNotifyWithRecordData:(NSData * _Nullable)recordData;
/// EN: Observe AI chat switch state
/// CN: AI聊天开关状态
- (void)observerAIStateNotifyWithStatus:(NSData * _Nonnull)status;
/// EN: Observe whether device supports call recording
/// CN: 监听设备是否支持通话录音
- (void)observerIsSupportCallRecordNotifyWithStatus:(BOOL)status;
/// EN: Observe AI chat image for intent recognition
/// CN: AI聊天意图识别返回图片
- (void)observerAIChatImageNotifyWithImageData:(NSData * _Nonnull)imageData;
/// EN: Observe sub‑chip firmware version for glasses
/// CN: 眼镜从片固件版本号
- (void)observerSubFirmwareVersionNotifyWithVersion:(NSString * _Nonnull)version;
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK19TSStartBurstManager")
@interface TSStartBurstManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TSStartBurstManager * _Nonnull shared;)
+ (TSStartBurstManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// 开始流式生成摘要
/// 流式摘要，直接返回完成标记与摘要内容
- (void)summaryWithSplitBy:(NSString * _Nonnull)text recognizeText:(void (^ _Nonnull)(BOOL, NSString * _Nonnull))recognizeText error:(void (^ _Nonnull)(NSError * _Nullable))error;
/// 停止流式生成摘要
- (void)cancelSummaryWithSplitByText;
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// 监听893xAI对话状态 0是关闭 1是开启 2是更新isChatting=true  3是更新isChatting=false
/// 手机拾音AI对话
/// <ul>
///   <li>
///     result: 返回事件需要的字段，question/answer 为可空
///   </li>
/// </ul>
- (void)startPhoneAIChatWithStateChanged:(void (^ _Nonnull)(enum TSAIState))stateChanged result:(void (^ _Nonnull)(NSInteger, NSString * _Nullable, BOOL, NSString * _Nullable, BOOL, BOOL))result error:(void (^ _Nonnull)(NSError * _Nonnull))error;
- (void)stopPhoneAIChat;
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// 手机拾音并翻译
- (void)translateByVoiceFromLan:(NSString * _Nullable)fromLan targetLan:(NSString * _Nullable)targetLan recognizeText:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))recognizeText error:(void (^ _Nonnull)(NSError * _Nullable))error;
/// 停止手机拾音
- (void)stopTranslateByVoiceWithIsSave:(BOOL)isSave;
/// 开始流式翻译
/// 流式翻译，直接返回完成标记与内容
- (void)translateWithSplitBy:(NSString * _Nonnull)text fromLan:(NSString * _Nullable)fromLan targetLan:(NSString * _Nullable)targetLan recognizeText:(void (^ _Nonnull)(BOOL, NSString * _Nonnull))recognizeText error:(void (^ _Nonnull)(NSError * _Nullable))error;
/// 停止流式翻译
- (void)cancelTranslateByTextWithSplit;
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// 修改同声传译参数
- (void)modifyVoiceTranslateRecordFileWithRecordId:(NSString * _Nonnull)recordId recordName:(NSString * _Nonnull)recordName recognizeText:(NSString * _Nullable)recognizeText translateText:(NSString * _Nullable)translateText summary:(NSString * _Nullable)summary result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
- (void)modifyAIRecordFileWithRecordName:(NSString * _Nonnull)recordName fileState:(uint16_t)fileState summary:(NSString * _Nullable)summary recognizeText:(NSString * _Nullable)recognizeText result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
- (void)deleteAIRecordFileWithRecordName:(NSString * _Nonnull)recordName result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
- (void)renameAIRecordFileWithRecordId:(NSString * _Nonnull)recordId newName:(NSString * _Nonnull)newName result:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
- (void)getAIRecordFileListWithResult:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))result;
/// @brief Get AI record file list by record type
/// @chinese 根据录音类型获取AI录音文件列表
/// @param recordType
/// EN: Record type (0: Live, 1: Call)
/// CN: 录音类型（0: 现场录音, 1: 通话录音）
/// @param result
/// EN: Result callback
/// CN: 结果回调
- (void)getAIRecordFileListByRecordType:(int16_t)recordType result:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))result;
/// @brief Get AI record file list by file state
/// @chinese 根据转录状态获取AI录音文件列表
/// @param fileState
/// EN: File state (0: Not transcribed, 1: Fully transcribed)
/// CN: 文件状态（0: 未转录, 1: 完全转录）
/// @param result
/// EN: Result callback
/// CN: 结果回调
- (void)getAIRecordFileListByFileState:(int16_t)fileState result:(void (^ _Nonnull)(NSArray<NSDictionary<NSString *, id> *> * _Nonnull))result;
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
/// 配置语音活动检测参数（供外部调用，避免外部直接依赖 TSSCOAudioCaptureManager）
/// 使用 NSNumber? 以便 @objc 兼容 Objective‑C	on the interface boundary
- (void)configureVoiceActivityDetectionWithSilenceThreshold:(NSNumber * _Nullable)silenceThreshold silenceTimeout:(NSNumber * _Nullable)silenceTimeout enabled:(NSNumber * _Nullable)enabled;
/// 开启多模态AI对话（眼镜）
/// \param stateChanged 会话状态变化
///
/// \param result 结果回调，返回事件实际需要的字段
/// dialogId: 本次对话ID
/// isFinish: 当前这段文本是否结束
/// answer: AI回复文本
/// question: 用户提问文本
/// conversationFinish: 一轮对话是否结束
///
/// \param error 错误
///
/// \param intent 解析到意图时的回调
///
- (void)startMultiAIChatWithStateChanged:(void (^ _Nonnull)(enum TSAIState))stateChanged result:(void (^ _Nonnull)(NSInteger, BOOL, NSString * _Nonnull, NSString * _Nonnull, BOOL))result error:(void (^ _Nonnull)(NSError * _Nonnull))error intent:(void (^ _Nullable)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSString * _Nonnull, NSString * _Nonnull))intent;
- (void)stopMultiAIChat;
@end

@interface TSStartBurstManager (SWIFT_EXTENSION(TopStepAIBudsSDK))
- (void)startAIRecordWithType:(uint8_t)type result:(void (^ _Nonnull)(BOOL, NSString * _Nonnull))result error:(void (^ _Nonnull)(NSError * _Nullable))error;
- (void)stopAIRecord:(void (^ _Nonnull)(BOOL, NSError * _Nullable))result;
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK13TopStepAIBuds")
@interface TopStepAIBuds : NSObject
/// EN: SDK singleton instance
/// CN: SDK 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) TopStepAIBuds * _Nonnull shared;)
+ (TopStepAIBuds * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// EN: Currently connected earbuds device
/// CN: 当前连接的设备
@property (nonatomic, readonly, strong) TSSBEarbuds * _Nullable earbuds;
/// EN: External observer for device events
/// CN: 监听设备返回的事件
@property (nonatomic, readonly, strong) id <TSSoudbudObserver> _Nullable observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (CBManagerState)getCentralManagerState SWIFT_WARN_UNUSED_RESULT;
/// EN: Stop scanning for devices.
/// CN: 停止扫描设备。
+ (void)stopScan;
/// EN: Scan nearby devices and return the first found result via callback.
/// CN: 扫描附近设备，通过回调返回第一个发现的结果。
+ (void)scanDeviceWithResult:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfo * _Nullable, CBPeripheral * _Nullable))result timeout:(NSTimeInterval)timeout;
/// 查找已连接的经典蓝牙设备
/// EN: Find a connected GATT device by UUID and service ID.
/// CN: 通过 UUID 与服务 ID 查找已连接的 GATT 设备。
+ (void)findGATTDeviceWithUuid:(NSString * _Nonnull)uuid servicesID:(NSString * _Nonnull)servicesID result:(void (^ _Nonnull)(NSError * _Nullable, CBPeripheral * _Nullable))result timeout:(NSTimeInterval)timeout;
/// 根据uuid查找指定的ble设备
/// EN: Find a BLE device by UUID.
/// CN: 通过 UUID 查找 BLE 设备。
+ (void)findDeviceWithUuid:(NSString * _Nonnull)uuid result:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfo * _Nullable, CBPeripheral * _Nullable))result timeout:(NSTimeInterval)timeout;
/// CN: 断开当前连接设备
+ (void)disconnectDevice;
/// EN: Connect to a device with specified UUID and connection style, then initialize.
/// CN: 使用指定 UUID 与连接方式连接设备，并完成初始化。
+ (void)connectDeviceWithUuid:(NSString * _Nonnull)uuid connectStyle:(enum TPSDeviceConnectStyle)connectStyle category:(enum TPSDeviceCategory)category deviceObserver:(id <TSSoudbudObserver> _Nullable)deviceObserver result:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfo * _Nullable, CBPeripheral * _Nullable))result;
@end

@interface TopStepAIBuds (SWIFT_EXTENSION(TopStepAIBudsSDK)) <TSSoudbudObserver>
/// EN: Notify sub-chip firmware version update.
/// CN: 通知从片固件版本变更。
- (void)observerSubFirmwareVersionNotifyWithVersion:(NSString * _Nonnull)version;
/// EN: Notify AI chat image data.
/// CN: 通知 AI 对话图片数据。
- (void)observerAIChatImageNotifyWithImageData:(NSData * _Nonnull)imageData;
/// EN: Notify device support state for call recording.
/// CN: 通知设备是否支持通话录音。
- (void)observerIsSupportCallRecordNotifyWithStatus:(BOOL)status;
/// EN: Notify Bluetooth connection state changes.
/// CN: 通知蓝牙连接状态变化。
- (void)observerDeviceBTStateWithState:(enum TSBTConnectState)state peripheral:(CBPeripheral * _Nonnull)peripheral;
/// EN: Notify power changes of earbuds and case.
/// CN: 通知耳机与充电盒电量变化。
- (void)observerPowerChangeWithLeftPower:(NSNumber * _Nullable)leftPower leftCharging:(NSNumber * _Nullable)leftCharging rightPower:(NSNumber * _Nullable)rightPower rightCharging:(NSNumber * _Nullable)rightCharging hubPower:(NSNumber * _Nullable)hubPower hubCharging:(NSNumber * _Nullable)hubCharging;
/// EN: Notify playback state changes.
/// CN: 通知播放状态变化。
- (void)observerPlayStateChangeWithIsPlaying:(BOOL)isPlaying;
/// EN: Notify work mode changes.
/// CN: 通知工作模式变化。
- (void)observerWorkModeChangeWithWorkMode:(enum TSSBEarbudsWorkMode)workMode;
/// EN: Notify in-ear detection changes.
/// CN: 通知入耳检测状态变化。
- (void)observerInEarStatusChangeWithLeftInEar:(BOOL)leftInEar rightInEar:(BOOL)rightInEar;
/// EN: Notify TWS connection state changes.
/// CN: 通知 TWS 连接状态变化。
- (void)observerTWSConnectedChangeWithIsConnected:(BOOL)isConnected;
/// EN: Notify EQ setting changes.
/// CN: 通知 EQ 设置变化。
- (void)observerEQSettingChangeWithMode:(uint8_t)mode gains:(NSArray<NSNumber *> * _Nonnull)gains;
/// EN: Notify device volume change.
/// CN: 通知设备音量变化。
- (void)observerDeviceVolumeChangeWithVolume:(uint8_t)volume;
/// EN: Notify ANC mode changes.
/// CN: 通知 ANC 模式变化。
- (void)observerANCModeChangeWithMode:(enum TSSBEarbudsAncMode)mode;
/// EN: Notify ANC gain changes.
/// CN: 通知 ANC 增益变化。
- (void)observerANCGainChangeWithGain:(uint8_t)gain;
/// EN: Notify transparency gain changes.
/// CN: 通知通透增益变化。
- (void)observerTransparencyGainChangeWithGain:(uint8_t)gain;
/// EN: Notify 3D sound effect enable state changes.
/// CN: 通知 3D 音效开关变化。
- (void)observerSoundEffect3DChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Notify Bass Engine enable state changes.
/// CN: 通知低音增强开关变化。
- (void)observerBassEngineStatusChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Notify AI record data stream.
/// CN: 通知 AI 录音数据流。
- (void)observerAIRecordNotifyWithRecordData:(NSData * _Nullable)recordData;
/// EN: Notify AI state data.
/// CN: 通知 AI 状态数据。
- (void)observerAIStateNotifyWithStatus:(NSData * _Nonnull)status;
/// EN: Notify key settings change.
/// CN: 通知按键设置变化。
- (void)observerKeySettingsChangeWithOperations:(NSArray<NSNumber *> * _Nonnull)operations functions:(NSArray<NSNumber *> * _Nonnull)functions;
/// EN: Notify prompt tone type change.
/// CN: 通知提示音类型变化。
- (void)observerPromptToneTypeChangeWithType:(uint8_t)type;
/// EN: Notify LED switch state change.
/// CN: 通知 LED 开关状态变化。
- (void)observerLEDSwitchChangeWithIsOn:(BOOL)isOn;
/// EN: Notify main side change (left/right primary).
/// CN: 通知主副耳变化（左/右主）。
- (void)observerMainSideChangeWithIsLeft:(BOOL)isLeft;
/// EN: Notify multipoint enable state change.
/// CN: 通知多点连接开关变化。
- (void)observerMultipointStatusChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Notify multipoint device list and connection states.
/// CN: 通知多点连接设备列表及连接状态。
- (void)observerMultipointInfoChangeWithDevices:(NSArray<NSDictionary *> * _Nonnull)devices;
/// EN: Notify voice recognition enable state change.
/// CN: 通知语音识别开关变化。
- (void)observerVoiceRecognitionChangeWithIsEnabled:(BOOL)isEnabled;
/// EN: Notify remote camera control state.
/// CN: 通知远程相机控制状态。
- (void)observerRemoteCameraControlStateWithState:(uint8_t)state;
/// EN: Notify media count changes (photos, videos, audios).
/// CN: 通知媒体数量变化（图片、视频、音频）。
- (void)observerMediaCountDidChangedWithPicCount:(uint32_t)picCount videoCount:(uint32_t)videoCount audioCount:(uint32_t)audioCount;
/// EN: Notify Wi-Fi state change.
/// CN: 通知 Wi-Fi 状态变化。
- (void)observerWifiStateChangedWithState:(enum TSSBEarbudsWiFiState)state;
/// EN: Notify Wi-Fi address (IP or Hotspot info).
/// CN: 通知 Wi‑Fi 地址（IP 或热点信息）。
- (void)observerWifiAddressNotifyWithWifiAddress:(NSString * _Nonnull)wifiAddress;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
