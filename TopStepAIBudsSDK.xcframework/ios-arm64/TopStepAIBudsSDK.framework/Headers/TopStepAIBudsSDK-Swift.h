#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef TOPSTEPAIBUDSSDK_SWIFT_H
#define TOPSTEPAIBUDSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreBluetooth;
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TopStepAIBudsSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class CBPeripheral;
@class CBService;
@class CBCharacteristic;
SWIFT_CLASS("_TtC16TopStepAIBudsSDK10TSBTDevice")
@interface TSBTDevice : NSObject <CBPeripheralDelegate>
/// EN: Called after discovering services on the peripheral.
/// CN: 发现外设的服务后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Called after discovering characteristics for a specific service.
/// CN: 为指定服务发现特征后回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Called when the notification state for a characteristic changes.
/// CN: 当某个特征的通知开关状态发生变化时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a value was written to a characteristic.
/// CN: 向特征写入数据完成后的回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Called when a characteristic’s value is updated.
/// CN: 当读取或通知导致特征值更新时回调。
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
@class NSString;
/// EN: Objective-C friendly device basic info model (mirror of Swift TSDeviceBaseInfo)
/// CN: 面向 Objective-C 的设备基础信息模型（Swift TSDeviceBaseInfo 的镜像）
SWIFT_CLASS("_TtC16TopStepAIBudsSDK20TSDeviceBaseInfoObjc")
@interface TSDeviceBaseInfoObjc : NSObject
/// EN: SDK type rawValue (TPSSDKType)
/// CN: SDK 类型枚举 rawValue（TPSSDKType）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull sdkType;
/// EN: Device vendor type rawValue (TPSDeviceType)
/// CN: 设备厂商类型 rawValue（TPSDeviceType）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull deviceType;
/// EN: Device category rawValue (TPSDeviceCategory)
/// CN: 设备分类 rawValue（TPSDeviceCategory）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull deviceCategory;
/// EN: Device MAC string
/// CN: 设备 MAC 字符串
@property (nonatomic, readonly, copy) NSString * _Nonnull mac;
/// EN: Device name
/// CN: 设备名称
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// EN: Device UUID string
/// CN: 设备 UUID 字符串
@property (nonatomic, readonly, copy) NSString * _Nonnull uuid;
/// EN: Designated initializer
/// CN: 指定初始化方法
- (nonnull instancetype)initWithSdkType:(NSNumber * _Nonnull)sdkType deviceType:(NSNumber * _Nonnull)deviceType deviceCategory:(NSNumber * _Nonnull)deviceCategory mac:(NSString * _Nonnull)mac name:(NSString * _Nonnull)name uuid:(NSString * _Nonnull)uuid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// EN: Key setting pair for Objective-C (operation/function raw values)
/// CN: 面向 Objective-C 的按键配置（操作/功能 rawValue）
SWIFT_CLASS("_TtC16TopStepAIBudsSDK16TSKeySettingObjc")
@interface TSKeySettingObjc : NSObject
/// EN: Operation rawValue (TSSBEarbudsDeviceOperationType)
/// CN: 操作类型 rawValue（TSSBEarbudsDeviceOperationType）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull operation;
/// EN: Function rawValue (TSSBEarbudsKeyFunction)
/// CN: 功能类型 rawValue（TSSBEarbudsKeyFunction）
@property (nonatomic, readonly, strong) NSNumber * _Nonnull function;
/// EN: Designated initializer
/// CN: 指定初始化方法
- (nonnull instancetype)initWithOperation:(NSNumber * _Nonnull)operation function:(NSNumber * _Nonnull)function OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
/// EN: Multipoint device info for Objective-C (MAC bytes, connection state, name)
/// CN: 面向 Objective-C 的一拖二设备信息（MAC 字节、连接状态、名称）
SWIFT_CLASS("_TtC16TopStepAIBudsSDK22TSMultipointDeviceObjc")
@interface TSMultipointDeviceObjc : NSObject
/// EN: MAC address bytes
/// CN: MAC 地址字节数据
@property (nonatomic, readonly, copy) NSData * _Nonnull mac;
/// EN: Whether connected
/// CN: 是否已连接
@property (nonatomic, readonly) BOOL isConnected;
/// EN: Device name
/// CN: 设备名称
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// EN: Designated initializer
/// CN: 指定初始化方法
- (nonnull instancetype)initWithMac:(NSData * _Nonnull)mac isConnected:(BOOL)isConnected name:(NSString * _Nonnull)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK11TSSBEarbuds")
@interface TSSBEarbuds : TSBTDevice
/// EN: Peripheral did discover services callback
/// CN: 发现服务回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverServices:(NSError * _Nullable)error;
/// EN: Peripheral did discover characteristics for service callback
/// CN: 发现特征回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didDiscoverCharacteristicsForService:(CBService * _Nonnull)service error:(NSError * _Nullable)error;
/// EN: Notification state update for characteristic callback
/// CN: 设置数据读取特征通知回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Write value result callback
/// CN: 写入特征值结果回调
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didWriteValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
/// EN: Characteristic value update callback (read/notify)
/// CN: 特征值更新回调（读取/通知）
- (void)peripheral:(CBPeripheral * _Nonnull)peripheral didUpdateValueForCharacteristic:(CBCharacteristic * _Nonnull)characteristic error:(NSError * _Nullable)error;
@end

/// 耳机蓝牙指令管理类
/// 负责管理与耳机的蓝牙通信，包括：
/// <ol>
///   <li>
///     发送请求到耳机
///   </li>
///   <li>
///     处理耳机的响应
///   </li>
///   <li>
///     管理请求队列和超时
///   </li>
///   <li>
///     处理分包数据
///   </li>
/// </ol>
SWIFT_CLASS("_TtC16TopStepAIBudsSDK22TSSBEarbudsCommMannger")
@interface TSSBEarbudsCommMannger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// EN: Objective-C observer protocol for earbuds events
/// CN: 面向 Objective-C 的耳机事件观察者协议
SWIFT_PROTOCOL("_TtP16TopStepAIBudsSDK21TSSoudbudObserverObjc_")
@protocol TSSoudbudObserverObjc <NSObject>
/// EN: Observe Bluetooth connection state changes
/// CN: 监听蓝牙连接状态变化
- (void)observerDeviceBTStateWithState:(NSNumber * _Nonnull)state peripheral:(CBPeripheral * _Nonnull)peripheral;
/// EN: Observe power and charging state changes
/// CN: 监听电量与充电状态变化
- (void)observerPowerChangeWithLeftPower:(NSNumber * _Nullable)leftPower leftCharging:(NSNumber * _Nullable)leftCharging rightPower:(NSNumber * _Nullable)rightPower rightCharging:(NSNumber * _Nullable)rightCharging hubPower:(NSNumber * _Nullable)hubPower hubCharging:(NSNumber * _Nullable)hubCharging;
/// EN: Observe playback state
/// CN: 监听播放状态
- (void)observerPlayStateChangeWithIsPlaying:(NSNumber * _Nonnull)isPlaying;
/// EN: Observe work mode changes
/// CN: 监听工作模式变化
- (void)observerWorkModeChangeWithWorkMode:(NSNumber * _Nonnull)workMode;
/// EN: Observe in-ear detection changes
/// CN: 监听入耳检测变化
- (void)observerInEarStatusChangeWithLeftInEar:(NSNumber * _Nonnull)leftInEar rightInEar:(NSNumber * _Nonnull)rightInEar;
/// EN: Observe TWS connection state
/// CN: 监听 TWS 连接状态
- (void)observerTWSConnectedChangeWithIsConnected:(NSNumber * _Nonnull)isConnected;
/// EN: Observe EQ settings change
/// CN: 监听 EQ 设置变化
- (void)observerEQSettingChangeWithMode:(NSNumber * _Nonnull)mode gains:(NSArray<NSNumber *> * _Nonnull)gains;
/// EN: Observe device volume change
/// CN: 监听设备音量变化
- (void)observerDeviceVolumeChangeWithVolume:(NSNumber * _Nonnull)volume;
/// EN: Observe ANC mode and gains
/// CN: 监听 ANC 模式与增益
- (void)observerANCModeChangeWithMode:(NSNumber * _Nonnull)mode;
- (void)observerANCGainChangeWithGain:(NSNumber * _Nonnull)gain;
- (void)observerTransparencyGainChangeWithGain:(NSNumber * _Nonnull)gain;
/// EN: Observe sound effects switches
/// CN: 监听音效开关
- (void)observerSoundEffect3DChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerBassEngineStatusChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
/// EN: Observe key settings change
/// CN: 监听按键配置变化
- (void)observerKeySettingsChangeWithSettings:(NSArray<TSKeySettingObjc *> * _Nonnull)settings;
/// EN: Observe prompt tone type change
/// CN: 监听提示音类型变化
- (void)observerPromptToneTypeChangeWithType:(NSNumber * _Nonnull)type;
/// EN: Observe LED switch
/// CN: 监听 LED 开关
- (void)observerLEDSwitchChangeWithIsOn:(NSNumber * _Nonnull)isOn;
/// EN: Observe main/side ear change
/// CN: 监听主/副耳变化
- (void)observerMainSideChangeWithIsLeft:(NSNumber * _Nonnull)isLeft;
/// EN: Observe multipoint states and device list
/// CN: 监听一拖二开关与设备列表
- (void)observerMultipointStatusChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
- (void)observerMultipointInfoChangeWithDevices:(NSArray<TSMultipointDeviceObjc *> * _Nonnull)devices;
/// EN: Observe voice recognition enable state
/// CN: 监听语音识别开关状态
- (void)observerVoiceRecognitionChangeWithIsEnabled:(NSNumber * _Nonnull)isEnabled;
/// EN: Observe remote camera control state
/// CN: 监听遥控拍照状态
- (void)observerRemoteCameraControlStateWithState:(NSNumber * _Nonnull)state;
/// EN: Observe media counts
/// CN: 监听多媒体数量
- (void)observerMediaCountDidChangedWithPicCount:(NSNumber * _Nonnull)picCount videoCount:(NSNumber * _Nonnull)videoCount audioCount:(NSNumber * _Nonnull)audioCount;
/// EN: Observe Wi-Fi state and address
/// CN: 监听 Wi‑Fi 状态与地址
- (void)observerWifiStateChangedWithState:(NSNumber * _Nonnull)state;
- (void)observerWifiAddressNotifyWithWifiAddress:(NSString * _Nonnull)wifiAddress;
/// EN: Observe AI stream/state and capabilities
/// CN: 监听 AI 数据流/状态与能力
- (void)observerAIRecordNotifyWithRecordData:(NSData * _Nullable)recordData;
- (void)observerAIStateNotifyWithStatus:(NSData * _Nonnull)status;
- (void)observerIsSupportCallRecordNotifyWithStatus:(NSNumber * _Nonnull)status;
- (void)observerAIChatImageNotifyWithImageData:(NSData * _Nonnull)imageData;
- (void)observerSubFirmwareVersionNotifyWithVersion:(NSString * _Nonnull)version;
@end

SWIFT_CLASS("_TtC16TopStepAIBudsSDK13TopStepAIBuds")
@interface TopStepAIBuds : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSError;
/// EN: Objective-C entry point for scanning, finding and connecting devices
/// CN: 面向 Objective-C 的入口类，提供扫描、查找与连接能力
SWIFT_CLASS("_TtC16TopStepAIBudsSDK17TopStepAIBudsObjc")
@interface TopStepAIBudsObjc : NSObject
/// EN: Enable/disable console logs
/// CN: 开启/关闭控制台日志
+ (void)logsOpen:(BOOL)open;
/// EN: Stop scanning devices
/// CN: 停止扫描设备
+ (void)stopScan;
/// EN: Disconnect current device
/// CN: 断开当前设备
+ (void)disconnectDevice;
/// EN: Scan device and callback first found result
/// CN: 扫描设备并回调第一个发现的结果
+ (void)scanDeviceWithTimeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Find a connected GATT device by UUID and service ID
/// CN: 通过 UUID 与服务 ID 查找已连接的 GATT 设备
+ (void)findGATTDeviceWithUuid:(NSString * _Nonnull)uuid servicesID:(NSString * _Nonnull)servicesID timeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Find a BLE device by UUID
/// CN: 通过 UUID 查找 BLE 设备
+ (void)findDeviceWithUuid:(NSString * _Nonnull)uuid timeout:(NSTimeInterval)timeout callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
/// EN: Connect to a device with given UUID
/// CN: 使用指定 UUID 连接设备
/// \param connectStyle EN: 1=GATT, 2=BLE; CN: 1=GATT，2=BLE
///
/// \param category EN: TPSDeviceCategory.rawValue; CN: TPSDeviceCategory.rawValue
///
/// \param observer EN: Objective-C observer; CN: 观察者（可选）
///
+ (void)connectDeviceWithUuid:(NSString * _Nonnull)uuid connectStyle:(NSInteger)connectStyle category:(NSInteger)category observer:(id <TSSoudbudObserverObjc> _Nullable)observer callback:(void (^ _Nonnull)(NSError * _Nullable, TSDeviceBaseInfoObjc * _Nullable, CBPeripheral * _Nullable))callback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
