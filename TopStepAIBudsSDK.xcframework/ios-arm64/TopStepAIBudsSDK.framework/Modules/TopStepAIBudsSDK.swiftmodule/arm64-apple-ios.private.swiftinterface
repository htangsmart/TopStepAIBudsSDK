// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TopStepAIBudsSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CommonCrypto
import CoreBluetooth
import Foundation
import RxRelay
import RxSwift
import Swift
import TopStepComKit
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum TSBTErrorType : Swift.Int {
  case unkmown = -99999
  case permissionNotDetermined = -1000
  case permissionRestricted = -1001
  case permissionDenied = -1002
  case permissionUnknown = -1003
  case stateUnknown = -1100
  case stateResetting = -1101
  case stateUnsupported = -1102
  case stateUnauthorized = -1103
  case statePoweredOff = -1104
  case stateUnknownError = -1105
  case connectTimeout = -1200
  case connectCancel = -1201
  case connectFailed = -1202
  case connectBluetoothOff = -1203
  case connectInvalidDevice = -1204
  case connectLost = -1205
  case serviceDiscoveryFailed = -1206
  case characteristicDiscoveryFailed = -1207
  case connectConflict = -1208
  case scanTimeout = -1300
  case scanStop = -1301
  case scanConflict = -1302
  case scanBluetoothOff = -1303
  case writeFailed = -1400
  case readFailed = -1401
  case notifyFailed = -1402
  case invalidData = -1403
  case invalidParameter = -1404
  case operationNotSupported = -1405
  case operationTimeout = -1406
  case operationFailed = -1407
  case setDeviceDataFailed = -1408
  case commandRepeatFailed = -1409
  case receiveEmptyData = -1410
  case systemBusy = -1411
  case fullStorage = -1412
  case stateLowPower = -1413
  case sameFirmware = -1513
  case unableUpdate = -1514
  case dataLenthError = -1515
  case isFirmwareUploading = -1516
  public var errorMessage: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TSBTError {
  public static let domain: Swift.String
  public static func makeError(type: TopStepAIBudsSDK.TSBTErrorType, message: Swift.String? = nil) -> Foundation.NSError
  public static func makeAuthorizationError(status: CoreBluetooth.CBManagerAuthorization) -> Foundation.NSError?
  public static func makeStateError(state: CoreBluetooth.CBManagerState) -> Foundation.NSError?
  public static func makeScanError(type: TopStepAIBudsSDK.TSBTErrorType) -> Foundation.NSError
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TSSBEarbuds : TopStepAIBudsSDK.TSBTDevice {
  @objc public var commandManager: TopStepAIBudsSDK.TSSBEarbudsCommMannger {
    get
  }
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
@objc public enum TSSBBTCommandType : Swift.UInt8 {
  case request = 1
  case response = 2
  case notify = 3
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsCommandType : Swift.UInt8 {
  case eq = 0x20
  case musicControl = 0x21
  case deviceOperation = 0x22
  case autoShutdown = 0x23
  case factoryReset = 0x24
  case workMode = 0x25
  case inEarDetect = 0x26
  case deviceInfo = 0x27
  case deviceInfoNotify = 0x28
  case promptTone = 0x29
  case findDevice = 0x2A
  case autoAnswer = 0x2B
  case ancMode = 0x2C
  case bluetoothName = 0x2D
  case ledMode = 0x2E
  case clearPairRecord = 0x2F
  case ancGain = 0x30
  case transparencyGain = 0x31
  case soundEffect3D = 0x32
  case multipoint = 0x33
  case voiceRecognition = 0x34
  case anc = 0x35
  case bassEngine = 0x36
  case remoteCamera = 0xF3
  case otaAllowedRequest = 0xA0
  case beginOTARequest = 0xA1
  case subseqOTARequest = 0xA2
  case otaStateNofity = 0xA3
  case setAIChatState = 0xb0
  case controlAIRecord = 0xb1
  case startCameraAndTakephoto = 0xE1
  case shutDownRecord = 0xE2
  case startAudioRecord = 0xE5
  case wifiSetting = 0xE6
  case startFileTransfer = 0xE7
  case wifitStateChanged = 0xEC
  case getStorageInfo = 0xEA
  case getMediaCount = 0xEF
  case setStandardTime = 0xF0
  case aiRecordDataNotify = 0xb2
  case subFirmwareVersion = 0xE9
  case aiChatImageNotify = 0xE3
  case takeVideoRecord = 0xE4
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsDeviceInfoType : Swift.UInt8 {
  case devicePower = 0x01
  case mainFirmwareVersion = 0x02
  case bluetoothName = 0x03
  case eqSetting = 0x04
  case keySettings = 0x05
  case deviceVolume = 0x06
  case playState = 0x07
  case workMode = 0x08
  case inEarStatus = 0x09
  case promptToneType = 0x0A
  case autoAnswer = 0x0B
  case ancMode = 0x0C
  case isTWS = 0x0D
  case twsConnected = 0x0E
  case ledSwitch = 0x0F
  case fwChecksum = 0x10
  case ancGain = 0x11
  case transparencyGain = 0x12
  case ancGainNum = 0x13
  case transparencyGainNum = 0x14
  case allEqSettings = 0x15
  case mainSide = 0x16
  case productColor = 0x17
  case soundEffect3D = 0x18
  case multipointStatus = 0x19
  case multipointInfo = 0x1A
  case voiceRecognition = 0x1C
  case ancFadeStatus = 0x1D
  case bassEngineStatus = 0x1E
  case bassEngineValue = 0x1F
  case bassEngineRange = 0x20
  case deviceCapabilities = 0xFE
  case maxPacketSize = 0xFF
  case compartmentMacAddress = 0x25
  case isSupportCallRecord = 0x26
  case antiJitterSupport = 0x80
  case localPlaySupport = 0x81
  case playDuration = 0x82
  case audioRecordDuration = 0x83
  case languagesSupport = 0x84
  case deviceSerialNum = 0x85
  case deviceModel = 0x86
  case voiceCommamdSupport = 0x87
  case musicOriginPlace = 0x88
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsMusicControlType : Swift.UInt8 {
  case volume = 0x01
  case play = 0x02
  case pause = 0x03
  case previous = 0x04
  case next = 0x05
  case up = 0x06
  case down = 0x07
  case mute = 0x08
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsDeviceOperationType : Swift.UInt8 {
  case leftShortPress = 0x01
  case rightShortPress = 0x02
  case leftDoubleClick = 0x03
  case rightDoubleClick = 0x04
  case leftTripleClick = 0x05
  case rightTripleClick = 0x06
  case leftLongPress = 0x07
  case rightLongPress = 0x08
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsKeyFunction : Swift.UInt8 {
  case none = 0
  case redial = 1
  case voiceAssistant = 2
  case previous = 3
  case next = 4
  case volumeUp = 5
  case volumeDown = 6
  case playPause = 7
  case gameMode = 8
  case ancSetting = 9
  case takePhotoSetting = 10
  case continuousShooting = 11
  case startOrStopRecording = 12
  case startOrStopAudioRecord = 13
  case LocalOrBTPlaySwitch = 14
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsAncMode : Swift.UInt8 {
  case normal = 0
  case noiseCancellation = 1
  case transparency = 2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsWorkMode : Swift.UInt8 {
  case normal = 0
  case game = 1
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsProductColor : Swift.UInt8 {
  case white = 1
  case cyan = 2
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBRemoteCameraState : Swift.UInt8 {
  case exitCamera = 0
  case enterCamera = 1
  case takePhotoSuccess = 2
  case takePhotoFailed = 3
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsWiFiSettingType : Swift.UInt8 {
  case wifiModel = 0x01
  case wifiSsid = 0x02
  case wifiPassword = 0x03
  case wifiChannel = 0x04
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TSSBEarbudsWiFiState : Swift.UInt8 {
  case hotPotClose = 0
  case hotPotOpen = 1
  case wifiDirectOpen = 2
  case wifiDirectConnected = 3
  case wifiDirectFailed = 4
  case wifiDirectTimeout = 5
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol TSBTObserver {
  func observerDeviceBTState(state: TopStepAIBudsSDK.TSBTConnectState, peripheral: CoreBluetooth.CBPeripheral)
}
public protocol TSSoudbudObserver : AnyObject, TopStepAIBudsSDK.TSBTObserver {
  func observerPowerChange(leftPower: Swift.UInt8?, leftCharging: Swift.Bool?, rightPower: Swift.UInt8?, rightCharging: Swift.Bool?, hubPower: Swift.UInt8?, hubCharging: Swift.Bool?)
  func observerPlayStateChange(isPlaying: Swift.Bool)
  func observerWorkModeChange(workMode: TopStepAIBudsSDK.TSSBEarbudsWorkMode)
  func observerInEarStatusChange(leftInEar: Swift.Bool, rightInEar: Swift.Bool)
  func observerTWSConnectedChange(isConnected: Swift.Bool)
  func observerEQSettingChange(mode: Swift.UInt8, gains: [Swift.Int8])
  func observerDeviceVolumeChange(volume: Swift.UInt8)
  func observerANCModeChange(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode)
  func observerANCGainChange(gain: Swift.UInt8)
  func observerTransparencyGainChange(gain: Swift.UInt8)
  func observerSoundEffect3DChange(isEnabled: Swift.Bool)
  func observerBassEngineStatusChange(isEnabled: Swift.Bool)
  func observerKeySettingsChange(settings: [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)])
  func observerPromptToneTypeChange(type: Swift.UInt8)
  func observerLEDSwitchChange(isOn: Swift.Bool)
  func observerMainSideChange(isLeft: Swift.Bool)
  func observerMultipointStatusChange(isEnabled: Swift.Bool)
  func observerMultipointInfoChange(devices: [(mac: [Swift.UInt8], isConnected: Swift.Bool, name: Swift.String)])
  func observerVoiceRecognitionChange(isEnabled: Swift.Bool)
  func observerRemoteCameraControlState(state: Swift.UInt8)
  func observerMediaCountDidChanged(picCount: Swift.UInt32, videoCount: Swift.UInt32, audioCount: Swift.UInt32)
  func observerWifiStateChanged(state: TopStepAIBudsSDK.TSSBEarbudsWiFiState)
  func observerWifiAddressNotify(wifiAddress: Swift.String)
  func observerAIRecordNotify(recordData: Foundation.Data?)
  func observerAIStateNotify(status: Foundation.Data)
  func observerIsSupportCallRecordNotify(status: Swift.Bool)
  func observerAIChatImageNotify(imageData: Foundation.Data)
  func observerSubFirmwareVersionNotify(version: Swift.String)
}
extension TopStepAIBudsSDK.TSSBEarbudsCommMannger {
  public func getMaxPacketSize(result: @escaping (Foundation.NSError?, Swift.Int?) -> Swift.Void)
  public func getAllEqualizer(result: @escaping (Foundation.NSError?, [Swift.Dictionary<Swift.String, Any>]) -> Swift.Void)
  public func getDeviceEqualizer(result: @escaping (Foundation.NSError?, (eqMode: Swift.UInt8, eqGain: [Swift.Int8])?) -> Swift.Void)
  public func getDevicePower(result: @escaping (Foundation.NSError?, (leftPower: Swift.UInt8, leftCharging: Swift.Bool, rightPower: Swift.UInt8, rightCharging: Swift.Bool, hubPower: Swift.UInt8, hubCharging: Swift.Bool)?) -> Swift.Void)
  public func getDeviceKeySettings(result: @escaping (Foundation.NSError?, [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)]?) -> Swift.Void)
  public func getIsSupportTWS(result: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getIsTWSConnected(result: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getMainFirmwareVersion(result: @escaping (Foundation.NSError?, Swift.String?) -> Swift.Void)
  public func getSubFirmwareVersion(result: @escaping (Foundation.NSError?, Swift.String?) -> Swift.Void)
  public func setDeviceEqualizer(mode: Swift.UInt8, gains: [Swift.Int8], result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setANC(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setWorkMode(mode: TopStepAIBudsSDK.TSSBEarbudsWorkMode, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func resetDevice(result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setDeviceOperation(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func findDevice(start: Swift.Bool, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getSupportLanguages(result: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  public func setCurrentLanguages(languageCode: Swift.Int, result: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public func queryABMateDeviceinfo(result: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func updateCameraState(cameraState: TopStepAIBudsSDK.TSSBRemoteCameraState, result: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public func startABMateOTA(filePath: Swift.String?, updateVersion: Swift.String?, fileSize: Swift.Int?, fileMD5: Swift.String?, prcVersion: Swift.String?, progress: @escaping (_ progress: Swift.Int) -> Swift.Void, result: @escaping (_ complete: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func queryABMateStorageInfo(result: @escaping (_ usedSpace: Swift.UInt32, _ residueSpace: Swift.UInt32, _ error: (any Swift.Error)?) -> Swift.Void)
  public func queryABMateMediaCount(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func startABMateAudioRecord(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func shutDownABMateRecord(result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func takePhoto(model: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func takeVideoRecord(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeUp(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeDown(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeMute(mute: Swift.Bool, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeChange(volume: Swift.UInt8, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func aiChatStateChange(open: Swift.Bool, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func shutdownDevice(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func voiceRecognitionSetting(payload: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func setSystemWiFi(model: Swift.UInt8?, channel: Swift.UInt8?, ssid: Swift.String?, password: Swift.String?, result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func startFileTransfer(result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func setABMateStandardTime(timestamp: Swift.UInt32, timezoneMinutes: Swift.Int16, result: @escaping (_ resultCode: Swift.UInt8, _ error: (any Swift.Error)?) -> Swift.Void)
  public func controlABMetaRecord(recordType: Swift.UInt8, status: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
}
@objc public enum TPSSDKType : Swift.UInt8 {
  case unknow = 0
  case flywear = 1
  case fitcloud = 2
  case shenjuwm = 3
  case abmate = 4
  public static func sdkTypeWith(deviceType: TopStepAIBudsSDK.TPSDeviceType) -> TopStepAIBudsSDK.TPSSDKType
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum TPSDeviceType : Swift.UInt {
  case unknown = 0
  case ryTB = 0x5442
  case hxTD = 0x5444
  case zkTZ = 0x545A
  case ryHT = 0x4854
  case ryXQ = 0x5851
  case zkZR = 0x5A52
  case zkZG = 0x5A47
  case hx0600 = 0x0600
  case zkryTR = 0x5452
  case sjC001 = 0xC001
  case zkZC = 0x5A43
  case zk4206 = 0x4206
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
@objc public enum TPSDeviceConnectStyle : Swift.Int {
  case GATT = 1
  case BLE = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum TPSDeviceCategory : Swift.Int {
  case UNKNOW = -1
  case WATCH = 0
  case RING = 1
  case PHONE = 2
  case GLASS = 3
  case CHARGINGCASE = 4
  case SOUNDBUD = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TSDeviceBaseInfo {
  public var sdkType: TopStepAIBudsSDK.TPSSDKType
  public var deviceType: TopStepAIBudsSDK.TPSDeviceType
  public var deviceCategory: TopStepAIBudsSDK.TPSDeviceCategory
  public var mac: Swift.String
  public var name: Swift.String
  public var uuid: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TopStepAIBuds : ObjectiveC.NSObject {
  public static let shared: TopStepAIBudsSDK.TopStepAIBuds
  final public var earbuds: TopStepAIBudsSDK.TSSBEarbuds? {
    get
  }
  final public var observer: (any TopStepAIBudsSDK.TSSoudbudObserver)? {
    get
  }
  public static func logsOpen(_ open: Swift.Bool)
  public static func stopScan()
  public static func scanDevice(result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 60)
  public static func findGATTDevice(uuid: Swift.String, servicesID: Swift.String, result: @escaping (Foundation.NSError?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 45)
  public static func findDevice(uuid: Swift.String, result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 30)
  public static func disconnectDevice()
  public static func connectDevice(uuid: Swift.String, connectStyle: TopStepAIBudsSDK.TPSDeviceConnectStyle = .BLE, category: TopStepAIBudsSDK.TPSDeviceCategory, deviceObserver: (any TopStepAIBudsSDK.TSSoudbudObserver)?, result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc deinit
}
extension TopStepAIBudsSDK.TopStepAIBuds : TopStepAIBudsSDK.TSSoudbudObserver {
  final public func observerSubFirmwareVersionNotify(version: Swift.String)
  final public func observerAIChatImageNotify(imageData: Foundation.Data)
  final public func observerIsSupportCallRecordNotify(status: Swift.Bool)
  final public func observerDeviceBTState(state: TopStepAIBudsSDK.TSBTConnectState, peripheral: CoreBluetooth.CBPeripheral)
  final public func observerPowerChange(leftPower: Swift.UInt8?, leftCharging: Swift.Bool?, rightPower: Swift.UInt8?, rightCharging: Swift.Bool?, hubPower: Swift.UInt8?, hubCharging: Swift.Bool?)
  final public func observerPlayStateChange(isPlaying: Swift.Bool)
  final public func observerWorkModeChange(workMode: TopStepAIBudsSDK.TSSBEarbudsWorkMode)
  final public func observerInEarStatusChange(leftInEar: Swift.Bool, rightInEar: Swift.Bool)
  final public func observerTWSConnectedChange(isConnected: Swift.Bool)
  final public func observerEQSettingChange(mode: Swift.UInt8, gains: [Swift.Int8])
  final public func observerDeviceVolumeChange(volume: Swift.UInt8)
  final public func observerANCModeChange(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode)
  final public func observerANCGainChange(gain: Swift.UInt8)
  final public func observerTransparencyGainChange(gain: Swift.UInt8)
  final public func observerSoundEffect3DChange(isEnabled: Swift.Bool)
  final public func observerBassEngineStatusChange(isEnabled: Swift.Bool)
  final public func observerAIRecordNotify(recordData: Foundation.Data?)
  final public func observerAIStateNotify(status: Foundation.Data)
  final public func observerKeySettingsChange(settings: [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)])
  final public func observerPromptToneTypeChange(type: Swift.UInt8)
  final public func observerLEDSwitchChange(isOn: Swift.Bool)
  final public func observerMainSideChange(isLeft: Swift.Bool)
  final public func observerMultipointStatusChange(isEnabled: Swift.Bool)
  final public func observerMultipointInfoChange(devices: [(mac: [Swift.UInt8], isConnected: Swift.Bool, name: Swift.String)])
  final public func observerVoiceRecognitionChange(isEnabled: Swift.Bool)
  final public func observerRemoteCameraControlState(state: Swift.UInt8)
  final public func observerMediaCountDidChanged(picCount: Swift.UInt32, videoCount: Swift.UInt32, audioCount: Swift.UInt32)
  final public func observerWifiStateChanged(state: TopStepAIBudsSDK.TSSBEarbudsWiFiState)
  final public func observerWifiAddressNotify(wifiAddress: Swift.String)
}
@objc @objcMembers final public class TSDeviceBaseInfoObjc : ObjectiveC.NSObject {
  @objc final public let sdkType: TopStepAIBudsSDK.TPSSDKType
  @objc final public let deviceType: TopStepAIBudsSDK.TPSDeviceType
  @objc final public let deviceCategory: TopStepAIBudsSDK.TPSDeviceCategory
  @objc final public let mac: Foundation.NSString
  @objc final public let name: Foundation.NSString
  @objc final public let uuid: Foundation.NSString
  @objc public init(sdkType: TopStepAIBudsSDK.TPSSDKType, deviceType: TopStepAIBudsSDK.TPSDeviceType, deviceCategory: TopStepAIBudsSDK.TPSDeviceCategory, mac: Foundation.NSString, name: Foundation.NSString, uuid: Foundation.NSString)
  @objc deinit
}
@objc public protocol TSSoudbudObserverObjc : ObjectiveC.NSObjectProtocol {
  @objc optional func observerDeviceBTState(state: TopStepAIBudsSDK.TSBTConnectState, peripheral: CoreBluetooth.CBPeripheral)
  @objc optional func observerPowerChange(leftPower: Foundation.NSNumber?, leftCharging: Swift.Bool, rightPower: Foundation.NSNumber?, rightCharging: Swift.Bool, hubPower: Foundation.NSNumber?, hubCharging: Swift.Bool)
  @objc optional func observerPlayStateChange(isPlaying: Swift.Bool)
  @objc optional func observerWorkModeChange(workMode: TopStepAIBudsSDK.TSSBEarbudsWorkMode)
  @objc optional func observerInEarStatusChange(leftInEar: Swift.Bool, rightInEar: Swift.Bool)
  @objc optional func observerTWSConnectedChange(isConnected: Swift.Bool)
  @objc optional func observerEQSettingChange(mode: Swift.UInt8, gains: Foundation.NSArray)
  @objc optional func observerDeviceVolumeChange(volume: Swift.UInt8)
  @objc optional func observerANCModeChange(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode)
  @objc optional func observerANCGainChange(gain: Swift.UInt8)
  @objc optional func observerTransparencyGainChange(gain: Swift.UInt8)
  @objc optional func observerSoundEffect3DChange(isEnabled: Swift.Bool)
  @objc optional func observerBassEngineStatusChange(isEnabled: Swift.Bool)
  @objc optional func observerKeySettingsChange(settings: Foundation.NSArray)
  @objc optional func observerPromptToneTypeChange(type: Swift.UInt8)
  @objc optional func observerLEDSwitchChange(isOn: Swift.Bool)
  @objc optional func observerMainSideChange(isLeft: Swift.Bool)
  @objc optional func observerMultipointStatusChange(isEnabled: Swift.Bool)
  @objc optional func observerMultipointInfoChange(devices: Foundation.NSArray)
  @objc optional func observerVoiceRecognitionChange(isEnabled: Swift.Bool)
  @objc optional func observerRemoteCameraControlState(state: TopStepAIBudsSDK.TSSBRemoteCameraState)
  @objc optional func observerMediaCountDidChanged(picCount: Swift.UInt32, videoCount: Swift.UInt32, audioCount: Swift.UInt32)
  @objc optional func observerWifiStateChanged(state: TopStepAIBudsSDK.TSSBEarbudsWiFiState)
  @objc optional func observerWifiAddressNotify(wifiAddress: Foundation.NSString)
  @objc optional func observerAIRecordNotify(recordData: Foundation.NSData?)
  @objc optional func observerAIStateNotify(status: Foundation.NSData)
  @objc optional func observerIsSupportCallRecordNotify(status: Swift.Bool)
  @objc optional func observerAIChatImageNotify(imageData: Foundation.NSData)
  @objc optional func observerSubFirmwareVersionNotify(version: Foundation.NSString)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class TopStepAIBudsObjc : ObjectiveC.NSObject {
  @objc public static func logsOpen(_ open: Swift.Bool)
  @objc public static func stopScan()
  @objc public static func scanDevice(timeout: Foundation.TimeInterval = 60, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func findDevice(uuid: Foundation.NSString, timeout: Foundation.TimeInterval = 30, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func findGATTDevice(uuid: Foundation.NSString, servicesID: Foundation.NSString, timeout: Foundation.TimeInterval = 45, callback: @escaping (Foundation.NSError?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func connectDevice(uuid: Foundation.NSString, connectStyle: Foundation.NSNumber?, category: Foundation.NSNumber, observer: (any TopStepAIBudsSDK.TSSoudbudObserverObjc)?, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func disconnectDevice()
  @objc public static func getMaxPacketSize(_ callback: @escaping (Foundation.NSError?, Foundation.NSNumber?) -> Swift.Void)
  public static func getDeviceEqualizer(_ callback: @escaping (Foundation.NSError?, Swift.UInt8?, Foundation.NSArray?) -> Swift.Void)
  @objc public static func getAllEqualizer(_ callback: @escaping (Foundation.NSError?, Foundation.NSArray) -> Swift.Void)
  @objc public static func setDeviceEqualizer(mode: Foundation.NSNumber, gains: Foundation.NSArray, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func setANC(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func setWorkMode(mode: TopStepAIBudsSDK.TSSBEarbudsWorkMode, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func volumeUp(_ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func volumeDown(_ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func volumeMute(_ mute: Swift.Bool, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func volumeChange(_ value: Foundation.NSNumber, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func findDevice(_ start: Swift.Bool, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func shutdownDevice(_ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func resetDevice(_ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func aiChatStateChange(_ open: Swift.Bool, _ callback: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc public static func startAudioRecord(_ callback: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc public static func shutDownRecord(_ callback: @escaping (Foundation.NSNumber, Foundation.NSError?) -> Swift.Void)
  @objc public static func takePhoto(_ model: Foundation.NSNumber, _ callback: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc public static func takeVideoRecord(_ callback: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc public static func setSystemWiFi(model: Foundation.NSNumber?, channel: Foundation.NSNumber?, ssid: Foundation.NSString?, password: Foundation.NSString?, _ callback: @escaping (Foundation.NSNumber, Foundation.NSError?) -> Swift.Void)
  @objc public static func voiceRecognitionSetting(_ payload: Foundation.NSNumber, _ callback: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc public static func startABMateOTA(filePath: Foundation.NSString?, updateVersion: Foundation.NSString?, fileSize: Foundation.NSNumber?, fileMD5: Foundation.NSString?, prcVersion: Foundation.NSString?, progress: @escaping (Foundation.NSNumber) -> Swift.Void, completion: @escaping (Swift.Bool, Foundation.NSError?) -> Swift.Void)
  @objc public static func setStandardTime(timestamp: Foundation.NSNumber, timezoneMinutes: Foundation.NSNumber, _ callback: @escaping (Foundation.NSNumber, Foundation.NSError?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum TSBTConnectState : Swift.Int, @unchecked Swift.Sendable {
  case disconnected = 0
  case connecting = 1
  case connected = 2
  case disconnecting = 3
  case failed = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class TSSBEarbudsCommMannger : ObjectiveC.NSObject {
  public var peripheral: CoreBluetooth.CBPeripheral
  public var deviceInfo: TopStepAIBudsSDK.TSDeviceBaseInfo
  public static var MAX_PACKET_SIZE: Swift.Int
  public func getDeviceNecessaryInfo(result: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TSBTDevice : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  public var peripheral: CoreBluetooth.CBPeripheral {
    get
  }
  public var deviceInfo: TopStepAIBudsSDK.TSDeviceBaseInfo {
    get
  }
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.RawRepresentable {}
