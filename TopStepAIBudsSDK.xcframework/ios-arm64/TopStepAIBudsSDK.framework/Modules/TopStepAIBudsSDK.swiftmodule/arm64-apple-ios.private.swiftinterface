// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name TopStepAIBudsSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CommonCrypto
import CoreBluetooth
import Foundation
import RxRelay
import RxSwift
import Swift
import TopStepComKit
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class TSDeviceBaseInfoObjc : ObjectiveC.NSObject {
  @objc final public let sdkType: Foundation.NSNumber
  @objc final public let deviceType: Foundation.NSNumber
  @objc final public let deviceCategory: Foundation.NSNumber
  @objc final public let mac: Swift.String
  @objc final public let name: Swift.String
  @objc final public let uuid: Swift.String
  @objc public init(sdkType: Foundation.NSNumber, deviceType: Foundation.NSNumber, deviceCategory: Foundation.NSNumber, mac: Swift.String, name: Swift.String, uuid: Swift.String)
  @objc deinit
}
@objc public class TSMultipointDeviceObjc : ObjectiveC.NSObject {
  @objc final public let mac: Foundation.Data
  @objc final public let isConnected: Swift.Bool
  @objc final public let name: Swift.String
  @objc public init(mac: Foundation.Data, isConnected: Swift.Bool, name: Swift.String)
  @objc deinit
}
@objc public class TSKeySettingObjc : ObjectiveC.NSObject {
  @objc final public let operation: Foundation.NSNumber
  @objc final public let function: Foundation.NSNumber
  @objc public init(operation: Foundation.NSNumber, function: Foundation.NSNumber)
  @objc deinit
}
@objc public protocol TSSoudbudObserverObjc : ObjectiveC.NSObjectProtocol {
  @objc func observerDeviceBTState(state: Foundation.NSNumber, peripheral: CoreBluetooth.CBPeripheral)
  @objc func observerPowerChange(leftPower: Foundation.NSNumber?, leftCharging: Foundation.NSNumber?, rightPower: Foundation.NSNumber?, rightCharging: Foundation.NSNumber?, hubPower: Foundation.NSNumber?, hubCharging: Foundation.NSNumber?)
  @objc func observerPlayStateChange(isPlaying: Foundation.NSNumber)
  @objc func observerWorkModeChange(workMode: Foundation.NSNumber)
  @objc func observerInEarStatusChange(leftInEar: Foundation.NSNumber, rightInEar: Foundation.NSNumber)
  @objc func observerTWSConnectedChange(isConnected: Foundation.NSNumber)
  @objc func observerEQSettingChange(mode: Foundation.NSNumber, gains: [Foundation.NSNumber])
  @objc func observerDeviceVolumeChange(volume: Foundation.NSNumber)
  @objc func observerANCModeChange(mode: Foundation.NSNumber)
  @objc func observerANCGainChange(gain: Foundation.NSNumber)
  @objc func observerTransparencyGainChange(gain: Foundation.NSNumber)
  @objc func observerSoundEffect3DChange(isEnabled: Foundation.NSNumber)
  @objc func observerBassEngineStatusChange(isEnabled: Foundation.NSNumber)
  @objc func observerKeySettingsChange(settings: [TopStepAIBudsSDK.TSKeySettingObjc])
  @objc func observerPromptToneTypeChange(type: Foundation.NSNumber)
  @objc func observerLEDSwitchChange(isOn: Foundation.NSNumber)
  @objc func observerMainSideChange(isLeft: Foundation.NSNumber)
  @objc func observerMultipointStatusChange(isEnabled: Foundation.NSNumber)
  @objc func observerMultipointInfoChange(devices: [TopStepAIBudsSDK.TSMultipointDeviceObjc])
  @objc func observerVoiceRecognitionChange(isEnabled: Foundation.NSNumber)
  @objc func observerRemoteCameraControlState(state: Foundation.NSNumber)
  @objc func observerMediaCountDidChanged(picCount: Foundation.NSNumber, videoCount: Foundation.NSNumber, audioCount: Foundation.NSNumber)
  @objc func observerWifiStateChanged(state: Foundation.NSNumber)
  @objc func observerWifiAddressNotify(wifiAddress: Swift.String)
  @objc func observerAIRecordNotify(recordData: Foundation.Data?)
  @objc func observerAIStateNotify(status: Foundation.Data)
  @objc func observerIsSupportCallRecordNotify(status: Foundation.NSNumber)
  @objc func observerAIChatImageNotify(imageData: Foundation.Data)
  @objc func observerSubFirmwareVersionNotify(version: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class TopStepAIBudsObjc : ObjectiveC.NSObject {
  @objc public static func logsOpen(_ open: Swift.Bool)
  @objc public static func stopScan()
  @objc public static func disconnectDevice()
  @objc public static func scanDevice(timeout: Foundation.TimeInterval = 60, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func findGATTDevice(uuid: Swift.String, servicesID: Swift.String, timeout: Foundation.TimeInterval = 45, callback: @escaping (Foundation.NSError?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func findDevice(uuid: Swift.String, timeout: Foundation.TimeInterval = 30, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc public static func connectDevice(uuid: Swift.String, connectStyle: Swift.Int, category: Swift.Int, observer: (any TopStepAIBudsSDK.TSSoudbudObserverObjc)?, callback: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfoObjc?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public enum TSBTConnectState : Swift.Int, @unchecked Swift.Sendable {
  case disconnected
  case connecting
  case connected
  case disconnecting
  case failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class TSSBEarbudsCommMannger : ObjectiveC.NSObject {
  public var peripheral: CoreBluetooth.CBPeripheral
  public var deviceInfo: TopStepAIBudsSDK.TSDeviceBaseInfo
  public static var MAX_PACKET_SIZE: Swift.Int
  public func getDeviceNecessaryInfo(result: @escaping (Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TSBTDevice : ObjectiveC.NSObject, CoreBluetooth.CBPeripheralDelegate {
  public var peripheral: CoreBluetooth.CBPeripheral {
    get
  }
  public var deviceInfo: TopStepAIBudsSDK.TSDeviceBaseInfo {
    get
  }
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
public enum TPSSDKType : Swift.UInt8 {
  case unknow
  case flywear
  case fitcloud
  case shenjuwm
  case abmate
  public static func sdkTypeWith(deviceType: TopStepAIBudsSDK.TPSDeviceType) -> TopStepAIBudsSDK.TPSSDKType
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TPSDeviceType : Swift.UInt {
  case unknown
  case ryTB
  case hxTD
  case zkTZ
  case ryHT
  case ryXQ
  case zkZR
  case zkZG
  case hx0600
  case zkryTR
  case sjC001
  case zkZC
  case zk4206
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public enum TPSDeviceConnectStyle : Swift.Int {
  case GATT
  case BLE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TPSDeviceCategory : Swift.Int {
  case UNKNOW
  case WATCH
  case RING
  case PHONE
  case GLASS
  case CHARGINGCASE
  case SOUNDBUD
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct TSDeviceBaseInfo {
  public var sdkType: TopStepAIBudsSDK.TPSSDKType
  public var deviceType: TopStepAIBudsSDK.TPSDeviceType
  public var deviceCategory: TopStepAIBudsSDK.TPSDeviceCategory
  public var mac: Swift.String
  public var name: Swift.String
  public var uuid: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class TopStepAIBuds : ObjectiveC.NSObject {
  public static let shared: TopStepAIBudsSDK.TopStepAIBuds
  final public var earbuds: TopStepAIBudsSDK.TSSBEarbuds? {
    get
  }
  final public var observer: (any TopStepAIBudsSDK.TSSoudbudObserver)? {
    get
  }
  public static func logsOpen(_ open: Swift.Bool)
  public static func stopScan()
  public static func scanDevice(result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 60)
  public static func findGATTDevice(uuid: Swift.String, servicesID: Swift.String, result: @escaping (Foundation.NSError?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 45)
  public static func findDevice(uuid: Swift.String, result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void, timeout: Foundation.TimeInterval = 30)
  public static func disconnectDevice()
  public static func connectDevice(uuid: Swift.String, connectStyle: TopStepAIBudsSDK.TPSDeviceConnectStyle = .BLE, category: TopStepAIBudsSDK.TPSDeviceCategory, deviceObserver: (any TopStepAIBudsSDK.TSSoudbudObserver)?, result: @escaping (Foundation.NSError?, TopStepAIBudsSDK.TSDeviceBaseInfo?, CoreBluetooth.CBPeripheral?) -> Swift.Void)
  @objc deinit
}
extension TopStepAIBudsSDK.TopStepAIBuds : TopStepAIBudsSDK.TSSoudbudObserver {
  final public func observerSubFirmwareVersionNotify(version: Swift.String)
  final public func observerAIChatImageNotify(imageData: Foundation.Data)
  final public func observerIsSupportCallRecordNotify(status: Swift.Bool)
  final public func observerDeviceBTState(state: TopStepAIBudsSDK.TSBTConnectState, peripheral: CoreBluetooth.CBPeripheral)
  final public func observerPowerChange(leftPower: Swift.UInt8?, leftCharging: Swift.Bool?, rightPower: Swift.UInt8?, rightCharging: Swift.Bool?, hubPower: Swift.UInt8?, hubCharging: Swift.Bool?)
  final public func observerPlayStateChange(isPlaying: Swift.Bool)
  final public func observerWorkModeChange(workMode: TopStepAIBudsSDK.TSSBEarbudsWorkMode)
  final public func observerInEarStatusChange(leftInEar: Swift.Bool, rightInEar: Swift.Bool)
  final public func observerTWSConnectedChange(isConnected: Swift.Bool)
  final public func observerEQSettingChange(mode: Swift.UInt8, gains: [Swift.Int8])
  final public func observerDeviceVolumeChange(volume: Swift.UInt8)
  final public func observerANCModeChange(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode)
  final public func observerANCGainChange(gain: Swift.UInt8)
  final public func observerTransparencyGainChange(gain: Swift.UInt8)
  final public func observerSoundEffect3DChange(isEnabled: Swift.Bool)
  final public func observerBassEngineStatusChange(isEnabled: Swift.Bool)
  final public func observerAIRecordNotify(recordData: Foundation.Data?)
  final public func observerAIStateNotify(status: Foundation.Data)
  final public func observerKeySettingsChange(settings: [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)])
  final public func observerPromptToneTypeChange(type: Swift.UInt8)
  final public func observerLEDSwitchChange(isOn: Swift.Bool)
  final public func observerMainSideChange(isLeft: Swift.Bool)
  final public func observerMultipointStatusChange(isEnabled: Swift.Bool)
  final public func observerMultipointInfoChange(devices: [(mac: [Swift.UInt8], isConnected: Swift.Bool, name: Swift.String)])
  final public func observerVoiceRecognitionChange(isEnabled: Swift.Bool)
  final public func observerRemoteCameraControlState(state: Swift.UInt8)
  final public func observerMediaCountDidChanged(picCount: Swift.UInt32, videoCount: Swift.UInt32, audioCount: Swift.UInt32)
  final public func observerWifiStateChanged(state: TopStepAIBudsSDK.TSSBEarbudsWiFiState)
  final public func observerWifiAddressNotify(wifiAddress: Swift.String)
}
public enum TSBTErrorType : Swift.Int {
  case unkmown
  case permissionNotDetermined
  case permissionRestricted
  case permissionDenied
  case permissionUnknown
  case stateUnknown
  case stateResetting
  case stateUnsupported
  case stateUnauthorized
  case statePoweredOff
  case stateUnknownError
  case connectTimeout
  case connectCancel
  case connectFailed
  case connectBluetoothOff
  case connectInvalidDevice
  case connectLost
  case serviceDiscoveryFailed
  case characteristicDiscoveryFailed
  case connectConflict
  case scanTimeout
  case scanStop
  case scanConflict
  case scanBluetoothOff
  case writeFailed
  case readFailed
  case notifyFailed
  case invalidData
  case invalidParameter
  case operationNotSupported
  case operationTimeout
  case operationFailed
  case setDeviceDataFailed
  case commandRepeatFailed
  case receiveEmptyData
  case systemBusy
  case fullStorage
  case stateLowPower
  case sameFirmware
  case unableUpdate
  case dataLenthError
  case isFirmwareUploading
  public var errorMessage: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TSBTError {
  public static let domain: Swift.String
  public static func makeError(type: TopStepAIBudsSDK.TSBTErrorType, message: Swift.String? = nil) -> Foundation.NSError
  public static func makeAuthorizationError(status: CoreBluetooth.CBManagerAuthorization) -> Foundation.NSError?
  public static func makeStateError(state: CoreBluetooth.CBManagerState) -> Foundation.NSError?
  public static func makeScanError(type: TopStepAIBudsSDK.TSBTErrorType) -> Foundation.NSError
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class TSSBEarbuds : TopStepAIBudsSDK.TSBTDevice {
  public var commandManager: TopStepAIBudsSDK.TSSBEarbudsCommMannger {
    get
  }
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc override public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
public enum TSSBBTCommandType : Swift.UInt8 {
  case request
  case response
  case notify
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsCommandType : Swift.UInt8 {
  case eq
  case musicControl
  case deviceOperation
  case autoShutdown
  case factoryReset
  case workMode
  case inEarDetect
  case deviceInfo
  case deviceInfoNotify
  case promptTone
  case findDevice
  case autoAnswer
  case ancMode
  case bluetoothName
  case ledMode
  case clearPairRecord
  case ancGain
  case transparencyGain
  case soundEffect3D
  case multipoint
  case voiceRecognition
  case anc
  case bassEngine
  case remoteCamera
  case otaAllowedRequest
  case beginOTARequest
  case subseqOTARequest
  case otaStateNofity
  case setAIChatState
  case controlAIRecord
  case startCameraAndTakephoto
  case shutDownRecord
  case startAudioRecord
  case wifiSetting
  case startFileTransfer
  case wifitStateChanged
  case getStorageInfo
  case getMediaCount
  case setStandardTime
  case aiRecordDataNotify
  case subFirmwareVersion
  case aiChatImageNotify
  case takeVideoRecord
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsDeviceInfoType : Swift.UInt8 {
  case devicePower
  case mainFirmwareVersion
  case bluetoothName
  case eqSetting
  case keySettings
  case deviceVolume
  case playState
  case workMode
  case inEarStatus
  case promptToneType
  case autoAnswer
  case ancMode
  case isTWS
  case twsConnected
  case ledSwitch
  case fwChecksum
  case ancGain
  case transparencyGain
  case ancGainNum
  case transparencyGainNum
  case allEqSettings
  case mainSide
  case productColor
  case soundEffect3D
  case multipointStatus
  case multipointInfo
  case voiceRecognition
  case ancFadeStatus
  case bassEngineStatus
  case bassEngineValue
  case bassEngineRange
  case deviceCapabilities
  case maxPacketSize
  case compartmentMacAddress
  case isSupportCallRecord
  case antiJitterSupport
  case localPlaySupport
  case playDuration
  case audioRecordDuration
  case languagesSupport
  case deviceSerialNum
  case deviceModel
  case voiceCommamdSupport
  case musicOriginPlace
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsMusicControlType : Swift.UInt8 {
  case volume
  case play
  case pause
  case previous
  case next
  case up
  case down
  case mute
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsDeviceOperationType : Swift.UInt8 {
  case leftShortPress
  case rightShortPress
  case leftDoubleClick
  case rightDoubleClick
  case leftTripleClick
  case rightTripleClick
  case leftLongPress
  case rightLongPress
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsKeyFunction : Swift.UInt8 {
  case none
  case redial
  case voiceAssistant
  case previous
  case next
  case volumeUp
  case volumeDown
  case playPause
  case gameMode
  case ancSetting
  case takePhotoSetting
  case continuousShooting
  case startOrStopRecording
  case startOrStopAudioRecord
  case LocalOrBTPlaySwitch
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsAncMode : Swift.UInt8 {
  case normal
  case noiseCancellation
  case transparency
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsWorkMode : Swift.UInt8 {
  case normal
  case game
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsProductColor : Swift.UInt8 {
  case white
  case cyan
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBRemoteCameraState : Swift.UInt8 {
  case exitCamera
  case enterCamera
  case takePhotoSuccess
  case takePhotoFailed
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsWiFiSettingType : Swift.UInt8 {
  case wifiModel
  case wifiSsid
  case wifiPassword
  case wifiChannel
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TSSBEarbudsWiFiState : Swift.UInt8 {
  case hotPotClose
  case hotPotOpen
  case wifiDirectOpen
  case wifiDirectConnected
  case wifiDirectFailed
  case wifiDirectTimeout
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol TSBTObserver {
  func observerDeviceBTState(state: TopStepAIBudsSDK.TSBTConnectState, peripheral: CoreBluetooth.CBPeripheral)
}
public protocol TSSoudbudObserver : AnyObject, TopStepAIBudsSDK.TSBTObserver {
  func observerPowerChange(leftPower: Swift.UInt8?, leftCharging: Swift.Bool?, rightPower: Swift.UInt8?, rightCharging: Swift.Bool?, hubPower: Swift.UInt8?, hubCharging: Swift.Bool?)
  func observerPlayStateChange(isPlaying: Swift.Bool)
  func observerWorkModeChange(workMode: TopStepAIBudsSDK.TSSBEarbudsWorkMode)
  func observerInEarStatusChange(leftInEar: Swift.Bool, rightInEar: Swift.Bool)
  func observerTWSConnectedChange(isConnected: Swift.Bool)
  func observerEQSettingChange(mode: Swift.UInt8, gains: [Swift.Int8])
  func observerDeviceVolumeChange(volume: Swift.UInt8)
  func observerANCModeChange(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode)
  func observerANCGainChange(gain: Swift.UInt8)
  func observerTransparencyGainChange(gain: Swift.UInt8)
  func observerSoundEffect3DChange(isEnabled: Swift.Bool)
  func observerBassEngineStatusChange(isEnabled: Swift.Bool)
  func observerKeySettingsChange(settings: [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)])
  func observerPromptToneTypeChange(type: Swift.UInt8)
  func observerLEDSwitchChange(isOn: Swift.Bool)
  func observerMainSideChange(isLeft: Swift.Bool)
  func observerMultipointStatusChange(isEnabled: Swift.Bool)
  func observerMultipointInfoChange(devices: [(mac: [Swift.UInt8], isConnected: Swift.Bool, name: Swift.String)])
  func observerVoiceRecognitionChange(isEnabled: Swift.Bool)
  func observerRemoteCameraControlState(state: Swift.UInt8)
  func observerMediaCountDidChanged(picCount: Swift.UInt32, videoCount: Swift.UInt32, audioCount: Swift.UInt32)
  func observerWifiStateChanged(state: TopStepAIBudsSDK.TSSBEarbudsWiFiState)
  func observerWifiAddressNotify(wifiAddress: Swift.String)
  func observerAIRecordNotify(recordData: Foundation.Data?)
  func observerAIStateNotify(status: Foundation.Data)
  func observerIsSupportCallRecordNotify(status: Swift.Bool)
  func observerAIChatImageNotify(imageData: Foundation.Data)
  func observerSubFirmwareVersionNotify(version: Swift.String)
}
extension TopStepAIBudsSDK.TSSBEarbudsCommMannger {
  public func getMaxPacketSize(result: @escaping (Foundation.NSError?, Swift.Int?) -> Swift.Void)
  public func getAllEqualizer(result: @escaping (Foundation.NSError?, [Swift.Dictionary<Swift.String, Any>]) -> Swift.Void)
  public func getDeviceEqualizer(result: @escaping (Foundation.NSError?, (eqMode: Swift.UInt8, eqGain: [Swift.Int8])?) -> Swift.Void)
  public func getDevicePower(result: @escaping (Foundation.NSError?, (leftPower: Swift.UInt8, leftCharging: Swift.Bool, rightPower: Swift.UInt8, rightCharging: Swift.Bool, hubPower: Swift.UInt8, hubCharging: Swift.Bool)?) -> Swift.Void)
  public func getDeviceKeySettings(result: @escaping (Foundation.NSError?, [(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction)]?) -> Swift.Void)
  public func getIsSupportTWS(result: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getIsTWSConnected(result: @escaping (Foundation.NSError?, Swift.Bool) -> Swift.Void)
  public func getMainFirmwareVersion(result: @escaping (Foundation.NSError?, Swift.String?) -> Swift.Void)
  public func getSubFirmwareVersion(result: @escaping (Foundation.NSError?, Swift.String?) -> Swift.Void)
  public func setDeviceEqualizer(mode: Swift.UInt8, gains: [Swift.Int8], result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setANC(mode: TopStepAIBudsSDK.TSSBEarbudsAncMode, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setWorkMode(mode: TopStepAIBudsSDK.TSSBEarbudsWorkMode, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func resetDevice(result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func setDeviceOperation(operation: TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType, function: TopStepAIBudsSDK.TSSBEarbudsKeyFunction, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func findDevice(start: Swift.Bool, result: @escaping (Foundation.NSError?) -> Swift.Void)
  public func getSupportLanguages(result: @escaping (Foundation.Data?, (any Swift.Error)?) -> Swift.Void)
  public func setCurrentLanguages(languageCode: Swift.Int, result: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public func queryABMateDeviceinfo(result: @escaping ([Swift.String : Any]?, (any Swift.Error)?) -> Swift.Void)
  public func updateCameraState(cameraState: TopStepAIBudsSDK.TSSBRemoteCameraState, result: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  public func startABMateOTA(filePath: Swift.String?, updateVersion: Swift.String?, fileSize: Swift.Int?, fileMD5: Swift.String?, prcVersion: Swift.String?, progress: @escaping (_ progress: Swift.Int) -> Swift.Void, result: @escaping (_ complete: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func queryABMateStorageInfo(result: @escaping (_ usedSpace: Swift.UInt32, _ residueSpace: Swift.UInt32, _ error: (any Swift.Error)?) -> Swift.Void)
  public func queryABMateMediaCount(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func startABMateAudioRecord(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func shutDownABMateRecord(result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func takePhoto(model: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func takeVideoRecord(result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeUp(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeDown(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeMute(mute: Swift.Bool, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func volumeChange(volume: Swift.UInt8, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func aiChatStateChange(open: Swift.Bool, result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func shutdownDevice(result: @escaping (_ error: (any Swift.Error)?) -> Swift.Void)
  public func voiceRecognitionSetting(payload: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
  public func setSystemWiFi(model: Swift.UInt8?, channel: Swift.UInt8?, ssid: Swift.String?, password: Swift.String?, result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func startFileTransfer(result: @escaping (_ code: Swift.Int, _ error: (any Swift.Error)?) -> Swift.Void)
  public func setABMateStandardTime(timestamp: Swift.UInt32, timezoneMinutes: Swift.Int16, result: @escaping (_ resultCode: Swift.UInt8, _ error: (any Swift.Error)?) -> Swift.Void)
  public func controlABMetaRecord(recordType: Swift.UInt8, status: Swift.UInt8, result: @escaping (_ isSuccess: Swift.Bool, _ error: (any Swift.Error)?) -> Swift.Void)
}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsCommandType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceInfoType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSBTConnectState : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSSDKType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceConnectStyle : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.Equatable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.Hashable {}
extension TopStepAIBudsSDK.TPSDeviceCategory : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSBTErrorType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBBTCommandType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsMusicControlType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsDeviceOperationType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsKeyFunction : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsAncMode : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWorkMode : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsProductColor : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBRemoteCameraState : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiSettingType : Swift.RawRepresentable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.Equatable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.Hashable {}
extension TopStepAIBudsSDK.TSSBEarbudsWiFiState : Swift.RawRepresentable {}
